
led_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f7c  08002f7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f7c  08002f7c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f7c  08002f7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  08002ff4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08002ff4  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008737  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017db  00000000  00000000  000287d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  00029fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000818  00000000  00000000  0002a860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017217  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000728f  00000000  00000000  0004228f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000843c6  00000000  00000000  0004951e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd8e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023fc  00000000  00000000  000cd960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b38 	.word	0x08002b38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002b38 	.word	0x08002b38

0800014c <ascii_to_matrix>:
void ascii_to_matrix (uint8_t buf[], uint8_t pointer, uint8_t *output);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ascii_to_matrix (uint8_t buf[NUM_CHAR], uint8_t pointer, uint8_t *output){
 800014c:	b490      	push	{r4, r7}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]
	uint8_t i,j;
	num_char_out = pointer+4;
 800015a:	7afb      	ldrb	r3, [r7, #11]
 800015c:	3304      	adds	r3, #4
 800015e:	b2da      	uxtb	r2, r3
 8000160:	4b25      	ldr	r3, [pc, #148]	; (80001f8 <ascii_to_matrix+0xac>)
 8000162:	701a      	strb	r2, [r3, #0]
	for (i=0; i<4;i++){
 8000164:	2300      	movs	r3, #0
 8000166:	75fb      	strb	r3, [r7, #23]
 8000168:	e015      	b.n	8000196 <ascii_to_matrix+0x4a>
		for (j=0;j<8;j++){
 800016a:	2300      	movs	r3, #0
 800016c:	75bb      	strb	r3, [r7, #22]
 800016e:	e00c      	b.n	800018a <ascii_to_matrix+0x3e>
			*(output_arr+i*8+j) = 0x00;
 8000170:	4b22      	ldr	r3, [pc, #136]	; (80001fc <ascii_to_matrix+0xb0>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	7dfb      	ldrb	r3, [r7, #23]
 8000176:	00db      	lsls	r3, r3, #3
 8000178:	4619      	mov	r1, r3
 800017a:	7dbb      	ldrb	r3, [r7, #22]
 800017c:	440b      	add	r3, r1
 800017e:	4413      	add	r3, r2
 8000180:	2200      	movs	r2, #0
 8000182:	701a      	strb	r2, [r3, #0]
		for (j=0;j<8;j++){
 8000184:	7dbb      	ldrb	r3, [r7, #22]
 8000186:	3301      	adds	r3, #1
 8000188:	75bb      	strb	r3, [r7, #22]
 800018a:	7dbb      	ldrb	r3, [r7, #22]
 800018c:	2b07      	cmp	r3, #7
 800018e:	d9ef      	bls.n	8000170 <ascii_to_matrix+0x24>
	for (i=0; i<4;i++){
 8000190:	7dfb      	ldrb	r3, [r7, #23]
 8000192:	3301      	adds	r3, #1
 8000194:	75fb      	strb	r3, [r7, #23]
 8000196:	7dfb      	ldrb	r3, [r7, #23]
 8000198:	2b03      	cmp	r3, #3
 800019a:	d9e6      	bls.n	800016a <ascii_to_matrix+0x1e>
		}
	}
	for (i=0; i<(pointer+4); i++){
 800019c:	2300      	movs	r3, #0
 800019e:	75fb      	strb	r3, [r7, #23]
 80001a0:	e020      	b.n	80001e4 <ascii_to_matrix+0x98>
		for(j = 0; j<8; j++){
 80001a2:	2300      	movs	r3, #0
 80001a4:	75bb      	strb	r3, [r7, #22]
 80001a6:	e017      	b.n	80001d8 <ascii_to_matrix+0x8c>
			*(output_arr+(4+i)*8+j) = FONT[buf[i]][j];
 80001a8:	7dfb      	ldrb	r3, [r7, #23]
 80001aa:	68fa      	ldr	r2, [r7, #12]
 80001ac:	4413      	add	r3, r2
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	461c      	mov	r4, r3
 80001b2:	7dba      	ldrb	r2, [r7, #22]
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <ascii_to_matrix+0xb0>)
 80001b6:	6819      	ldr	r1, [r3, #0]
 80001b8:	7dfb      	ldrb	r3, [r7, #23]
 80001ba:	3304      	adds	r3, #4
 80001bc:	00db      	lsls	r3, r3, #3
 80001be:	4618      	mov	r0, r3
 80001c0:	7dbb      	ldrb	r3, [r7, #22]
 80001c2:	4403      	add	r3, r0
 80001c4:	440b      	add	r3, r1
 80001c6:	480e      	ldr	r0, [pc, #56]	; (8000200 <ascii_to_matrix+0xb4>)
 80001c8:	00e1      	lsls	r1, r4, #3
 80001ca:	4401      	add	r1, r0
 80001cc:	440a      	add	r2, r1
 80001ce:	7812      	ldrb	r2, [r2, #0]
 80001d0:	701a      	strb	r2, [r3, #0]
		for(j = 0; j<8; j++){
 80001d2:	7dbb      	ldrb	r3, [r7, #22]
 80001d4:	3301      	adds	r3, #1
 80001d6:	75bb      	strb	r3, [r7, #22]
 80001d8:	7dbb      	ldrb	r3, [r7, #22]
 80001da:	2b07      	cmp	r3, #7
 80001dc:	d9e4      	bls.n	80001a8 <ascii_to_matrix+0x5c>
	for (i=0; i<(pointer+4); i++){
 80001de:	7dfb      	ldrb	r3, [r7, #23]
 80001e0:	3301      	adds	r3, #1
 80001e2:	75fb      	strb	r3, [r7, #23]
 80001e4:	7dfa      	ldrb	r2, [r7, #23]
 80001e6:	7afb      	ldrb	r3, [r7, #11]
 80001e8:	3304      	adds	r3, #4
 80001ea:	429a      	cmp	r2, r3
 80001ec:	dbd9      	blt.n	80001a2 <ascii_to_matrix+0x56>
		}
	}

}
 80001ee:	bf00      	nop
 80001f0:	3718      	adds	r7, #24
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc90      	pop	{r4, r7}
 80001f6:	4770      	bx	lr
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	20000228 	.word	0x20000228
 8000200:	08002b64 	.word	0x08002b64

08000204 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	if(huart->Instance == huart2.Instance)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b2c      	ldr	r3, [pc, #176]	; (80002c4 <HAL_UART_RxCpltCallback+0xc0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d150      	bne.n	80002ba <HAL_UART_RxCpltCallback+0xb6>
	{
		if (uart_rx =='\n'){
 8000218:	4b2b      	ldr	r3, [pc, #172]	; (80002c8 <HAL_UART_RxCpltCallback+0xc4>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b0a      	cmp	r3, #10
 800021e:	d13a      	bne.n	8000296 <HAL_UART_RxCpltCallback+0x92>
			free(output_arr);
 8000220:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <HAL_UART_RxCpltCallback+0xc8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4618      	mov	r0, r3
 8000226:	f002 fbbf 	bl	80029a8 <free>
			output_arr = (uint8_t *)malloc((uart_rx_pointer+4)*8*sizeof(uint8_t));
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <HAL_UART_RxCpltCallback+0xcc>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	3304      	adds	r3, #4
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fbb0 	bl	8002998 <malloc>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	4b23      	ldr	r3, [pc, #140]	; (80002cc <HAL_UART_RxCpltCallback+0xc8>)
 800023e:	601a      	str	r2, [r3, #0]
			for (i=0; i<(4+uart_rx_pointer); i++){
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]
 8000244:	e015      	b.n	8000272 <HAL_UART_RxCpltCallback+0x6e>
				for (j=0; j<8; j++){
 8000246:	2300      	movs	r3, #0
 8000248:	73bb      	strb	r3, [r7, #14]
 800024a:	e00c      	b.n	8000266 <HAL_UART_RxCpltCallback+0x62>
					*(output_arr+i*8+j) = 0;
 800024c:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <HAL_UART_RxCpltCallback+0xc8>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	00db      	lsls	r3, r3, #3
 8000254:	4619      	mov	r1, r3
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	440b      	add	r3, r1
 800025a:	4413      	add	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
				for (j=0; j<8; j++){
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	3301      	adds	r3, #1
 8000264:	73bb      	strb	r3, [r7, #14]
 8000266:	7bbb      	ldrb	r3, [r7, #14]
 8000268:	2b07      	cmp	r3, #7
 800026a:	d9ef      	bls.n	800024c <HAL_UART_RxCpltCallback+0x48>
			for (i=0; i<(4+uart_rx_pointer); i++){
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	3301      	adds	r3, #1
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	7bfa      	ldrb	r2, [r7, #15]
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <HAL_UART_RxCpltCallback+0xcc>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	3304      	adds	r3, #4
 800027a:	429a      	cmp	r2, r3
 800027c:	dbe3      	blt.n	8000246 <HAL_UART_RxCpltCallback+0x42>
				}
			}
			ascii_to_matrix (uart_rx_buf, uart_rx_pointer,  output_arr);
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <HAL_UART_RxCpltCallback+0xcc>)
 8000280:	7819      	ldrb	r1, [r3, #0]
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <HAL_UART_RxCpltCallback+0xc8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	4812      	ldr	r0, [pc, #72]	; (80002d4 <HAL_UART_RxCpltCallback+0xd0>)
 800028a:	f7ff ff5f 	bl	800014c <ascii_to_matrix>
			uart_rx_pointer = 0;
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <HAL_UART_RxCpltCallback+0xcc>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
 8000294:	e00c      	b.n	80002b0 <HAL_UART_RxCpltCallback+0xac>

		}
		else{
			uart_rx_buf[uart_rx_pointer] = uart_rx;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <HAL_UART_RxCpltCallback+0xcc>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	461a      	mov	r2, r3
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <HAL_UART_RxCpltCallback+0xc4>)
 800029e:	7819      	ldrb	r1, [r3, #0]
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <HAL_UART_RxCpltCallback+0xd0>)
 80002a2:	5499      	strb	r1, [r3, r2]
			uart_rx_pointer++;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <HAL_UART_RxCpltCallback+0xcc>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <HAL_UART_RxCpltCallback+0xcc>)
 80002ae:	701a      	strb	r2, [r3, #0]

		}
		HAL_UART_Receive_DMA(&huart2, &uart_rx, 1);
 80002b0:	2201      	movs	r2, #1
 80002b2:	4905      	ldr	r1, [pc, #20]	; (80002c8 <HAL_UART_RxCpltCallback+0xc4>)
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <HAL_UART_RxCpltCallback+0xc0>)
 80002b6:	f002 f914 	bl	80024e2 <HAL_UART_Receive_DMA>
	}
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000019c 	.word	0x2000019c
 80002c8:	2000008d 	.word	0x2000008d
 80002cc:	20000228 	.word	0x20000228
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	20000138 	.word	0x20000138

080002d8 <data_to_module>:
// push data to module
void data_to_module (uint8_t *output ){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	uint32_t i;
	int32_t j;
	uint8_t addr;
	for (i = 0; i<8; i++){
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	e030      	b.n	8000348 <data_to_module+0x70>
				for (j = NUM_HOR_MODULE-1; j >= 0; j--){
 80002e6:	2303      	movs	r3, #3
 80002e8:	613b      	str	r3, [r7, #16]
 80002ea:	e01b      	b.n	8000324 <data_to_module+0x4c>
					addr = i+1;
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	73fb      	strb	r3, [r7, #15]
					HAL_SPI_Transmit_DMA(&hspi2, &addr, 1);
 80002f6:	f107 030f 	add.w	r3, r7, #15
 80002fa:	2201      	movs	r2, #1
 80002fc:	4619      	mov	r1, r3
 80002fe:	4816      	ldr	r0, [pc, #88]	; (8000358 <data_to_module+0x80>)
 8000300:	f001 feaa 	bl	8002058 <HAL_SPI_Transmit_DMA>
					HAL_SPI_Transmit_DMA(&hspi2, (output + j*8 +(7-i)), 1);
 8000304:	693b      	ldr	r3, [r7, #16]
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	461a      	mov	r2, r3
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	3307      	adds	r3, #7
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4413      	add	r3, r2
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	480f      	ldr	r0, [pc, #60]	; (8000358 <data_to_module+0x80>)
 800031a:	f001 fe9d 	bl	8002058 <HAL_SPI_Transmit_DMA>
				for (j = NUM_HOR_MODULE-1; j >= 0; j--){
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	3b01      	subs	r3, #1
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	2b00      	cmp	r3, #0
 8000328:	dae0      	bge.n	80002ec <data_to_module+0x14>
				}
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <data_to_module+0x84>)
 8000332:	f001 f9bf 	bl	80016b4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <data_to_module+0x84>)
 800033e:	f001 f9b9 	bl	80016b4 <HAL_GPIO_WritePin>
	for (i = 0; i<8; i++){
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	3301      	adds	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	2b07      	cmp	r3, #7
 800034c:	d9cb      	bls.n	80002e6 <data_to_module+0xe>
			}

}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000e0 	.word	0x200000e0
 800035c:	40010c00 	.word	0x40010c00

08000360 <Rotate>:
// rotate the bit to the right
void Rotate (uint8_t *output){
 8000360:	b4b0      	push	{r4, r5, r7}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	466b      	mov	r3, sp
 800036a:	461d      	mov	r5, r3
	uint32_t i, j;
	uint8_t smark [num_char_out];
 800036c:	4b76      	ldr	r3, [pc, #472]	; (8000548 <Rotate+0x1e8>)
 800036e:	7818      	ldrb	r0, [r3, #0]
 8000370:	4603      	mov	r3, r0
 8000372:	3b01      	subs	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	b2c1      	uxtb	r1, r0
 8000378:	f04f 0200 	mov.w	r2, #0
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	f04f 0400 	mov.w	r4, #0
 8000384:	00d4      	lsls	r4, r2, #3
 8000386:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800038a:	00cb      	lsls	r3, r1, #3
 800038c:	b2c1      	uxtb	r1, r0
 800038e:	f04f 0200 	mov.w	r2, #0
 8000392:	f04f 0300 	mov.w	r3, #0
 8000396:	f04f 0400 	mov.w	r4, #0
 800039a:	00d4      	lsls	r4, r2, #3
 800039c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80003a0:	00cb      	lsls	r3, r1, #3
 80003a2:	4603      	mov	r3, r0
 80003a4:	3307      	adds	r3, #7
 80003a6:	08db      	lsrs	r3, r3, #3
 80003a8:	00db      	lsls	r3, r3, #3
 80003aa:	ebad 0d03 	sub.w	sp, sp, r3
 80003ae:	466b      	mov	r3, sp
 80003b0:	3300      	adds	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]

	for (j=0; j<8; j++){
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]
 80003b8:	e0bc      	b.n	8000534 <Rotate+0x1d4>
		smark[0] = *(output + j) & 0x01;
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	4413      	add	r3, r2
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	701a      	strb	r2, [r3, #0]
		smark[0] = smark[0] << 07;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	01db      	lsls	r3, r3, #7
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	701a      	strb	r2, [r3, #0]

		smark[num_char_out-1] = *(output + 8*(num_char_out-1)+j) & 0x01;
 80003d8:	4b5b      	ldr	r3, [pc, #364]	; (8000548 <Rotate+0x1e8>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	461a      	mov	r2, r3
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	4413      	add	r3, r2
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	781a      	ldrb	r2, [r3, #0]
 80003ec:	4b56      	ldr	r3, [pc, #344]	; (8000548 <Rotate+0x1e8>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	f002 0201 	and.w	r2, r2, #1
 80003f6:	b2d1      	uxtb	r1, r2
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	54d1      	strb	r1, [r2, r3]
		smark[num_char_out-1] = smark[num_char_out-1] << 07;
 80003fc:	4b52      	ldr	r3, [pc, #328]	; (8000548 <Rotate+0x1e8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	5cd2      	ldrb	r2, [r2, r3]
 8000406:	4b50      	ldr	r3, [pc, #320]	; (8000548 <Rotate+0x1e8>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3b01      	subs	r3, #1
 800040c:	01d2      	lsls	r2, r2, #7
 800040e:	b2d1      	uxtb	r1, r2
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	54d1      	strb	r1, [r2, r3]
		*(output + 8*(num_char_out-1)+j) = *(output + 8*(num_char_out-1)+j) >> 1;
 8000414:	4b4c      	ldr	r3, [pc, #304]	; (8000548 <Rotate+0x1e8>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	3b01      	subs	r3, #1
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	461a      	mov	r2, r3
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	4413      	add	r3, r2
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	4b47      	ldr	r3, [pc, #284]	; (8000548 <Rotate+0x1e8>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3b01      	subs	r3, #1
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	4619      	mov	r1, r3
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	440b      	add	r3, r1
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	440b      	add	r3, r1
 800043a:	0852      	lsrs	r2, r2, #1
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	701a      	strb	r2, [r3, #0]
		*(output + 8*(num_char_out-1)+j) |= smark[0];
 8000440:	4b41      	ldr	r3, [pc, #260]	; (8000548 <Rotate+0x1e8>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	00db      	lsls	r3, r3, #3
 8000448:	461a      	mov	r2, r3
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	4413      	add	r3, r2
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	7819      	ldrb	r1, [r3, #0]
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	4b3b      	ldr	r3, [pc, #236]	; (8000548 <Rotate+0x1e8>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	4618      	mov	r0, r3
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	4403      	add	r3, r0
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	4403      	add	r3, r0
 800046a:	430a      	orrs	r2, r1
 800046c:	b2d2      	uxtb	r2, r2
 800046e:	701a      	strb	r2, [r3, #0]

		for (i = num_char_out-2; i>0; i--){
 8000470:	4b35      	ldr	r3, [pc, #212]	; (8000548 <Rotate+0x1e8>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	3b02      	subs	r3, #2
 8000476:	613b      	str	r3, [r7, #16]
 8000478:	e040      	b.n	80004fc <Rotate+0x19c>
			smark[i] = *(output + 8*i+j) & 0x01;
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	00da      	lsls	r2, r3, #3
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	4413      	add	r3, r2
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	b2d9      	uxtb	r1, r3
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	4413      	add	r3, r2
 8000494:	460a      	mov	r2, r1
 8000496:	701a      	strb	r2, [r3, #0]
			smark[i] = smark[i] << 07;
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	4413      	add	r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	01db      	lsls	r3, r3, #7
 80004a2:	b2d9      	uxtb	r1, r3
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	4413      	add	r3, r2
 80004aa:	460a      	mov	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
			*(output + 8*i+j)= *(output + 8*i+j) >> 1;
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	00da      	lsls	r2, r3, #3
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	4413      	add	r3, r2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	00d9      	lsls	r1, r3, #3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	440b      	add	r3, r1
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	440b      	add	r3, r1
 80004c8:	0852      	lsrs	r2, r2, #1
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	701a      	strb	r2, [r3, #0]
			*(output + 8*i+j) |= smark[i+1];
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	00da      	lsls	r2, r3, #3
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	4413      	add	r3, r2
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	7819      	ldrb	r1, [r3, #0]
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	3301      	adds	r3, #1
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	5cd2      	ldrb	r2, [r2, r3]
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	00d8      	lsls	r0, r3, #3
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	4403      	add	r3, r0
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	4403      	add	r3, r0
 80004f0:	430a      	orrs	r2, r1
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	701a      	strb	r2, [r3, #0]
		for (i = num_char_out-2; i>0; i--){
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1bb      	bne.n	800047a <Rotate+0x11a>
		}

		*(output+j) = *(output+j) >> 1;
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	4413      	add	r3, r2
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	6879      	ldr	r1, [r7, #4]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	440b      	add	r3, r1
 8000510:	0852      	lsrs	r2, r2, #1
 8000512:	b2d2      	uxtb	r2, r2
 8000514:	701a      	strb	r2, [r3, #0]
		*(output+j) |= smark[1];
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	4413      	add	r3, r2
 800051c:	7819      	ldrb	r1, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	785a      	ldrb	r2, [r3, #1]
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	4403      	add	r3, r0
 8000528:	430a      	orrs	r2, r1
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	701a      	strb	r2, [r3, #0]
	for (j=0; j<8; j++){
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	2b07      	cmp	r3, #7
 8000538:	f67f af3f 	bls.w	80003ba <Rotate+0x5a>
 800053c:	46ad      	mov	sp, r5
	}
}
 800053e:	bf00      	nop
 8000540:	371c      	adds	r7, #28
 8000542:	46bd      	mov	sp, r7
 8000544:	bcb0      	pop	{r4, r5, r7}
 8000546:	4770      	bx	lr
 8000548:	200001e0 	.word	0x200001e0

0800054c <Max7219_Config>:
void Max7219_Config(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
	uint8_t decode_mode = 0x09;
 8000552:	2309      	movs	r3, #9
 8000554:	73bb      	strb	r3, [r7, #14]
	uint8_t intensity = 0x0A;
 8000556:	230a      	movs	r3, #10
 8000558:	737b      	strb	r3, [r7, #13]
	uint8_t scan_limit = 0x0B;
 800055a:	230b      	movs	r3, #11
 800055c:	733b      	strb	r3, [r7, #12]
	uint8_t shut_down = 0x0C;
 800055e:	230c      	movs	r3, #12
 8000560:	72fb      	strb	r3, [r7, #11]
	uint8_t display_test = 0x0F;
 8000562:	230f      	movs	r3, #15
 8000564:	72bb      	strb	r3, [r7, #10]
	uint8_t mode_0 = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	727b      	strb	r3, [r7, #9]
	uint8_t mode_1 = 0x03;
 800056a:	2303      	movs	r3, #3
 800056c:	723b      	strb	r3, [r7, #8]
	uint8_t mode_2 = 0x07;
 800056e:	2307      	movs	r3, #7
 8000570:	71fb      	strb	r3, [r7, #7]
	uint8_t mode_3 = 0x01;
 8000572:	2301      	movs	r3, #1
 8000574:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e010      	b.n	800059e <Max7219_Config+0x52>
		HAL_SPI_Transmit_DMA( &hspi2, &decode_mode, 1);
 800057c:	f107 030e 	add.w	r3, r7, #14
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	4854      	ldr	r0, [pc, #336]	; (80006d8 <Max7219_Config+0x18c>)
 8000586:	f001 fd67 	bl	8002058 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_0, 1);
 800058a:	f107 0309 	add.w	r3, r7, #9
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	4851      	ldr	r0, [pc, #324]	; (80006d8 <Max7219_Config+0x18c>)
 8000594:	f001 fd60 	bl	8002058 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d9eb      	bls.n	800057c <Max7219_Config+0x30>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005aa:	484c      	ldr	r0, [pc, #304]	; (80006dc <Max7219_Config+0x190>)
 80005ac:	f001 f882 	bl	80016b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	4849      	ldr	r0, [pc, #292]	; (80006dc <Max7219_Config+0x190>)
 80005b8:	f001 f87c 	bl	80016b4 <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e010      	b.n	80005e4 <Max7219_Config+0x98>
		HAL_SPI_Transmit_DMA( &hspi2, &intensity, 1);
 80005c2:	f107 030d 	add.w	r3, r7, #13
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	4843      	ldr	r0, [pc, #268]	; (80006d8 <Max7219_Config+0x18c>)
 80005cc:	f001 fd44 	bl	8002058 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_1, 1);
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	483f      	ldr	r0, [pc, #252]	; (80006d8 <Max7219_Config+0x18c>)
 80005da:	f001 fd3d 	bl	8002058 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d9eb      	bls.n	80005c2 <Max7219_Config+0x76>
		}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	483a      	ldr	r0, [pc, #232]	; (80006dc <Max7219_Config+0x190>)
 80005f2:	f001 f85f 	bl	80016b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fc:	4837      	ldr	r0, [pc, #220]	; (80006dc <Max7219_Config+0x190>)
 80005fe:	f001 f859 	bl	80016b4 <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e00f      	b.n	8000628 <Max7219_Config+0xdc>
		HAL_SPI_Transmit_DMA( &hspi2, &scan_limit, 1);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	4831      	ldr	r0, [pc, #196]	; (80006d8 <Max7219_Config+0x18c>)
 8000612:	f001 fd21 	bl	8002058 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_2, 1);
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	482e      	ldr	r0, [pc, #184]	; (80006d8 <Max7219_Config+0x18c>)
 800061e:	f001 fd1b 	bl	8002058 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	3301      	adds	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d9ec      	bls.n	8000608 <Max7219_Config+0xbc>
			}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000634:	4829      	ldr	r0, [pc, #164]	; (80006dc <Max7219_Config+0x190>)
 8000636:	f001 f83d 	bl	80016b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4826      	ldr	r0, [pc, #152]	; (80006dc <Max7219_Config+0x190>)
 8000642:	f001 f837 	bl	80016b4 <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e00f      	b.n	800066c <Max7219_Config+0x120>
		HAL_SPI_Transmit_DMA( &hspi2, &shut_down, 1);
 800064c:	f107 030b 	add.w	r3, r7, #11
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	4820      	ldr	r0, [pc, #128]	; (80006d8 <Max7219_Config+0x18c>)
 8000656:	f001 fcff 	bl	8002058 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_3, 1);
 800065a:	1dbb      	adds	r3, r7, #6
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	481d      	ldr	r0, [pc, #116]	; (80006d8 <Max7219_Config+0x18c>)
 8000662:	f001 fcf9 	bl	8002058 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	3301      	adds	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d9ec      	bls.n	800064c <Max7219_Config+0x100>
				}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <Max7219_Config+0x190>)
 800067a:	f001 f81b 	bl	80016b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000684:	4815      	ldr	r0, [pc, #84]	; (80006dc <Max7219_Config+0x190>)
 8000686:	f001 f815 	bl	80016b4 <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e010      	b.n	80006b2 <Max7219_Config+0x166>
		HAL_SPI_Transmit_DMA( &hspi2, &display_test,1);
 8000690:	f107 030a 	add.w	r3, r7, #10
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <Max7219_Config+0x18c>)
 800069a:	f001 fcdd 	bl	8002058 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_0, 1);
 800069e:	f107 0309 	add.w	r3, r7, #9
 80006a2:	2201      	movs	r2, #1
 80006a4:	4619      	mov	r1, r3
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <Max7219_Config+0x18c>)
 80006a8:	f001 fcd6 	bl	8002058 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	3301      	adds	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	d9eb      	bls.n	8000690 <Max7219_Config+0x144>
					}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <Max7219_Config+0x190>)
 80006c0:	f000 fff8 	bl	80016b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <Max7219_Config+0x190>)
 80006cc:	f000 fff2 	bl	80016b4 <HAL_GPIO_WritePin>

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000e0 	.word	0x200000e0
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fb2d 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f83f 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f909 	bl	8000904 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f2:	f000 f8e1 	bl	80008b8 <MX_DMA_Init>
  MX_SPI2_Init();
 80006f6:	f000 f87f 	bl	80007f8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 f8b3 	bl	8000864 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t timer = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  Max7219_Config();
 8000702:	f7ff ff23 	bl	800054c <Max7219_Config>
  HAL_UART_Receive_DMA(&huart2, &uart_rx, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	4913      	ldr	r1, [pc, #76]	; (8000758 <main+0x78>)
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <main+0x7c>)
 800070c:	f001 fee9 	bl	80024e2 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ((HAL_GetTick()-timer >= SPEED)&&(output_arr != NULL)&&(num_char_out != 0)){
 8000710:	f000 fb70 	bl	8000df4 <HAL_GetTick>
 8000714:	4602      	mov	r2, r0
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800071e:	d3f7      	bcc.n	8000710 <main+0x30>
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <main+0x80>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f3      	beq.n	8000710 <main+0x30>
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <main+0x84>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0ef      	beq.n	8000710 <main+0x30>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x88>)
 8000736:	f000 ffd5 	bl	80016e4 <HAL_GPIO_TogglePin>
		  Rotate (output_arr);
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <main+0x80>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fe0e 	bl	8000360 <Rotate>
		  data_to_module(output_arr);
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <main+0x80>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fdc5 	bl	80002d8 <data_to_module>
		  timer=HAL_GetTick();
 800074e:	f000 fb51 	bl	8000df4 <HAL_GetTick>
 8000752:	6078      	str	r0, [r7, #4]
	  if ((HAL_GetTick()-timer >= SPEED)&&(output_arr != NULL)&&(num_char_out != 0)){
 8000754:	e7dc      	b.n	8000710 <main+0x30>
 8000756:	bf00      	nop
 8000758:	2000008d 	.word	0x2000008d
 800075c:	2000019c 	.word	0x2000019c
 8000760:	20000228 	.word	0x20000228
 8000764:	200001e0 	.word	0x200001e0
 8000768:	40011000 	.word	0x40011000

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b090      	sub	sp, #64	; 0x40
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0318 	add.w	r3, r7, #24
 8000776:	2228      	movs	r2, #40	; 0x28
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f002 f91c 	bl	80029b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 ffaf 	bl	8001718 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007c0:	f000 f90e 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fa1a 	bl	8001c18 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007ea:	f000 f8f9 	bl	80009e0 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3740      	adds	r7, #64	; 0x40
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI2_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_SPI2_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_SPI2_Init+0x64>)
 8000804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI2_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI2_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI2_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI2_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI2_Init+0x64>)
 8000824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000828:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI2_Init+0x64>)
 800082c:	2208      	movs	r2, #8
 800082e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI2_Init+0x64>)
 8000844:	220a      	movs	r2, #10
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI2_Init+0x64>)
 800084a:	f001 fb81 	bl	8001f50 <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 f8c4 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000e0 	.word	0x200000e0
 8000860:	40003800 	.word	0x40003800

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f001 fdd4 	bl	8002448 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f89b 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000019c 	.word	0x2000019c
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_DMA_Init+0x48>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <MX_DMA_Init+0x48>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_DMA_Init+0x48>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 fb6b 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008e0:	200f      	movs	r0, #15
 80008e2:	f000 fb84 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2010      	movs	r0, #16
 80008ec:	f000 fb63 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008f0:	2010      	movs	r0, #16
 80008f2:	f000 fb7c 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000980:	f000 fe98 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_GPIO_Init+0xd8>)
 800098c:	f000 fe92 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xd4>)
 80009aa:	f000 fd29 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2302      	movs	r3, #2
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_GPIO_Init+0xd8>)
 80009c8:	f000 fd1a 	bl	8001400 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40011000 	.word	0x40011000
 80009dc:	40010c00 	.word	0x40010c00

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <Error_Handler+0x6>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x5c>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_MspInit+0x60>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_MspInit+0x60>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010000 	.word	0x40010000

08000a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <HAL_SPI_MspInit+0xc0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d14a      	bne.n	8000b02 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <HAL_SPI_MspInit+0xc4>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <HAL_SPI_MspInit+0xc4>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a76:	61d3      	str	r3, [r2, #28]
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <HAL_SPI_MspInit+0xc4>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <HAL_SPI_MspInit+0xc4>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <HAL_SPI_MspInit+0xc4>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <HAL_SPI_MspInit+0xc4>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a9c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <HAL_SPI_MspInit+0xc8>)
 8000ab2:	f000 fca5 	bl	8001400 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000ab8:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <HAL_SPI_MspInit+0xd0>)
 8000aba:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000abe:	2210      	movs	r2, #16
 8000ac0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000ae8:	f000 fa9c 	bl	8001024 <HAL_DMA_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000af2:	f7ff ff75 	bl	80009e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000afa:	649a      	str	r2, [r3, #72]	; 0x48
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_SPI_MspInit+0xcc>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40003800 	.word	0x40003800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010c00 	.word	0x40010c00
 8000b18:	200001e4 	.word	0x200001e4
 8000b1c:	40020058 	.word	0x40020058

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <HAL_UART_MspInit+0xd4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d155      	bne.n	8000bec <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_UART_MspInit+0xd8>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	4a2c      	ldr	r2, [pc, #176]	; (8000bf8 <HAL_UART_MspInit+0xd8>)
 8000b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4a:	61d3      	str	r3, [r2, #28]
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_UART_MspInit+0xd8>)
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <HAL_UART_MspInit+0xd8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <HAL_UART_MspInit+0xd8>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <HAL_UART_MspInit+0xd8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b70:	2304      	movs	r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	481e      	ldr	r0, [pc, #120]	; (8000bfc <HAL_UART_MspInit+0xdc>)
 8000b84:	f000 fc3c 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <HAL_UART_MspInit+0xdc>)
 8000b9c:	f000 fc30 	bl	8001400 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0xe4>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000bd2:	f000 fa27 	bl	8001024 <HAL_DMA_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000bdc:	f7ff ff00 	bl	80009e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000be4:	639a      	str	r2, [r3, #56]	; 0x38
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_UART_MspInit+0xe0>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	2000009c 	.word	0x2000009c
 8000c04:	4002006c 	.word	0x4002006c

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f8bf 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Channel5_IRQHandler+0x10>)
 8000c5e:	f000 fa9b 	bl	8001198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001e4 	.word	0x200001e4

08000c6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA1_Channel6_IRQHandler+0x10>)
 8000c72:	f000 fa91 	bl	8001198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000009c 	.word	0x2000009c

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f001 fe48 	bl	8002944 <__errno>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20005000 	.word	0x20005000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000090 	.word	0x20000090
 8000ce8:	20000238 	.word	0x20000238

08000cec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d10:	4c0a      	ldr	r4, [pc, #40]	; (8000d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d1e:	f7ff ffe5 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f001 fe15 	bl	8002950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d26:	f7ff fcdb 	bl	80006e0 <main>
  bx lr
 8000d2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d34:	08002f84 	.word	0x08002f84
  ldr r2, =_sbss
 8000d38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d3c:	20000234 	.word	0x20000234

08000d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC1_2_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x28>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x28>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f923 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fe42 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f93b 	bl	800100a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f903 	bl	8000fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x20>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_IncTick+0x20>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	20000008 	.word	0x20000008
 8000df0:	2000022c 	.word	0x2000022c

08000df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <HAL_GetTick+0x10>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	2000022c 	.word	0x2000022c

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4906      	ldr	r1, [pc, #24]	; (8000ea0 <__NVIC_EnableIRQ+0x34>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff90 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff2d 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff42 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff90 	bl	8000ef8 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5f 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff35 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e043      	b.n	80010c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_DMA_Init+0xa8>)
 8001042:	4413      	add	r3, r2
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <HAL_DMA_Init+0xac>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	009a      	lsls	r2, r3, #2
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <HAL_DMA_Init+0xb0>)
 8001056:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2202      	movs	r2, #2
 800105c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800106e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001072:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800107c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	bffdfff8 	.word	0xbffdfff8
 80010d0:	cccccccd 	.word	0xcccccccd
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_DMA_Start_IT+0x20>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e04a      	b.n	800118e <HAL_DMA_Start_IT+0xb6>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001106:	2b01      	cmp	r3, #1
 8001108:	d13a      	bne.n	8001180 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2202      	movs	r2, #2
 800110e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 f938 	bl	80013a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 020e 	orr.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e00f      	b.n	800116e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0204 	bic.w	r2, r2, #4
 800115c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 020a 	orr.w	r2, r2, #10
 800116c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e005      	b.n	800118c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001188:	2302      	movs	r3, #2
 800118a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800118c:	7dfb      	ldrb	r3, [r7, #23]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	2204      	movs	r2, #4
 80011b6:	409a      	lsls	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d04f      	beq.n	8001260 <HAL_DMA_IRQHandler+0xc8>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d04a      	beq.n	8001260 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0204 	bic.w	r2, r2, #4
 80011e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a66      	ldr	r2, [pc, #408]	; (8001388 <HAL_DMA_IRQHandler+0x1f0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d029      	beq.n	8001246 <HAL_DMA_IRQHandler+0xae>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <HAL_DMA_IRQHandler+0x1f4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d022      	beq.n	8001242 <HAL_DMA_IRQHandler+0xaa>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a63      	ldr	r2, [pc, #396]	; (8001390 <HAL_DMA_IRQHandler+0x1f8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01a      	beq.n	800123c <HAL_DMA_IRQHandler+0xa4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a62      	ldr	r2, [pc, #392]	; (8001394 <HAL_DMA_IRQHandler+0x1fc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d012      	beq.n	8001236 <HAL_DMA_IRQHandler+0x9e>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a60      	ldr	r2, [pc, #384]	; (8001398 <HAL_DMA_IRQHandler+0x200>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00a      	beq.n	8001230 <HAL_DMA_IRQHandler+0x98>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5f      	ldr	r2, [pc, #380]	; (800139c <HAL_DMA_IRQHandler+0x204>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d102      	bne.n	800122a <HAL_DMA_IRQHandler+0x92>
 8001224:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001228:	e00e      	b.n	8001248 <HAL_DMA_IRQHandler+0xb0>
 800122a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800122e:	e00b      	b.n	8001248 <HAL_DMA_IRQHandler+0xb0>
 8001230:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001234:	e008      	b.n	8001248 <HAL_DMA_IRQHandler+0xb0>
 8001236:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800123a:	e005      	b.n	8001248 <HAL_DMA_IRQHandler+0xb0>
 800123c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001240:	e002      	b.n	8001248 <HAL_DMA_IRQHandler+0xb0>
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	e000      	b.n	8001248 <HAL_DMA_IRQHandler+0xb0>
 8001246:	2304      	movs	r3, #4
 8001248:	4a55      	ldr	r2, [pc, #340]	; (80013a0 <HAL_DMA_IRQHandler+0x208>)
 800124a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 8094 	beq.w	800137e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800125e:	e08e      	b.n	800137e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	2202      	movs	r2, #2
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d056      	beq.n	800131e <HAL_DMA_IRQHandler+0x186>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d051      	beq.n	800131e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10b      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 020a 	bic.w	r2, r2, #10
 8001296:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a38      	ldr	r2, [pc, #224]	; (8001388 <HAL_DMA_IRQHandler+0x1f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d029      	beq.n	80012fe <HAL_DMA_IRQHandler+0x166>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a37      	ldr	r2, [pc, #220]	; (800138c <HAL_DMA_IRQHandler+0x1f4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <HAL_DMA_IRQHandler+0x162>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a35      	ldr	r2, [pc, #212]	; (8001390 <HAL_DMA_IRQHandler+0x1f8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01a      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x15c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <HAL_DMA_IRQHandler+0x1fc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d012      	beq.n	80012ee <HAL_DMA_IRQHandler+0x156>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a32      	ldr	r2, [pc, #200]	; (8001398 <HAL_DMA_IRQHandler+0x200>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00a      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x150>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a31      	ldr	r2, [pc, #196]	; (800139c <HAL_DMA_IRQHandler+0x204>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d102      	bne.n	80012e2 <HAL_DMA_IRQHandler+0x14a>
 80012dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012e0:	e00e      	b.n	8001300 <HAL_DMA_IRQHandler+0x168>
 80012e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e6:	e00b      	b.n	8001300 <HAL_DMA_IRQHandler+0x168>
 80012e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ec:	e008      	b.n	8001300 <HAL_DMA_IRQHandler+0x168>
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	e005      	b.n	8001300 <HAL_DMA_IRQHandler+0x168>
 80012f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f8:	e002      	b.n	8001300 <HAL_DMA_IRQHandler+0x168>
 80012fa:	2320      	movs	r3, #32
 80012fc:	e000      	b.n	8001300 <HAL_DMA_IRQHandler+0x168>
 80012fe:	2302      	movs	r3, #2
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_DMA_IRQHandler+0x208>)
 8001302:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	2b00      	cmp	r3, #0
 8001312:	d034      	beq.n	800137e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800131c:	e02f      	b.n	800137e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2208      	movs	r2, #8
 8001324:	409a      	lsls	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d028      	beq.n	8001380 <HAL_DMA_IRQHandler+0x1e8>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d023      	beq.n	8001380 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 020e 	bic.w	r2, r2, #14
 8001346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	4798      	blx	r3
    }
  }
  return;
 800137e:	bf00      	nop
 8001380:	bf00      	nop
}
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020008 	.word	0x40020008
 800138c:	4002001c 	.word	0x4002001c
 8001390:	40020030 	.word	0x40020030
 8001394:	40020044 	.word	0x40020044
 8001398:	40020058 	.word	0x40020058
 800139c:	4002006c 	.word	0x4002006c
 80013a0:	40020000 	.word	0x40020000

080013a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d108      	bne.n	80013e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013e2:	e007      	b.n	80013f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	60da      	str	r2, [r3, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b08b      	sub	sp, #44	; 0x2c
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	e127      	b.n	8001664 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001414:	2201      	movs	r2, #1
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8116 	bne.w	800165e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b12      	cmp	r3, #18
 8001438:	d034      	beq.n	80014a4 <HAL_GPIO_Init+0xa4>
 800143a:	2b12      	cmp	r3, #18
 800143c:	d80d      	bhi.n	800145a <HAL_GPIO_Init+0x5a>
 800143e:	2b02      	cmp	r3, #2
 8001440:	d02b      	beq.n	800149a <HAL_GPIO_Init+0x9a>
 8001442:	2b02      	cmp	r3, #2
 8001444:	d804      	bhi.n	8001450 <HAL_GPIO_Init+0x50>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d031      	beq.n	80014ae <HAL_GPIO_Init+0xae>
 800144a:	2b01      	cmp	r3, #1
 800144c:	d01c      	beq.n	8001488 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800144e:	e048      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001450:	2b03      	cmp	r3, #3
 8001452:	d043      	beq.n	80014dc <HAL_GPIO_Init+0xdc>
 8001454:	2b11      	cmp	r3, #17
 8001456:	d01b      	beq.n	8001490 <HAL_GPIO_Init+0x90>
          break;
 8001458:	e043      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800145a:	4a89      	ldr	r2, [pc, #548]	; (8001680 <HAL_GPIO_Init+0x280>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d026      	beq.n	80014ae <HAL_GPIO_Init+0xae>
 8001460:	4a87      	ldr	r2, [pc, #540]	; (8001680 <HAL_GPIO_Init+0x280>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d806      	bhi.n	8001474 <HAL_GPIO_Init+0x74>
 8001466:	4a87      	ldr	r2, [pc, #540]	; (8001684 <HAL_GPIO_Init+0x284>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d020      	beq.n	80014ae <HAL_GPIO_Init+0xae>
 800146c:	4a86      	ldr	r2, [pc, #536]	; (8001688 <HAL_GPIO_Init+0x288>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01d      	beq.n	80014ae <HAL_GPIO_Init+0xae>
          break;
 8001472:	e036      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001474:	4a85      	ldr	r2, [pc, #532]	; (800168c <HAL_GPIO_Init+0x28c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0xae>
 800147a:	4a85      	ldr	r2, [pc, #532]	; (8001690 <HAL_GPIO_Init+0x290>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d016      	beq.n	80014ae <HAL_GPIO_Init+0xae>
 8001480:	4a84      	ldr	r2, [pc, #528]	; (8001694 <HAL_GPIO_Init+0x294>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0xae>
          break;
 8001486:	e02c      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e028      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	3304      	adds	r3, #4
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e023      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	3308      	adds	r3, #8
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e01e      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	330c      	adds	r3, #12
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e019      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b6:	2304      	movs	r3, #4
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e012      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	611a      	str	r2, [r3, #16]
          break;
 80014ce:	e008      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	615a      	str	r2, [r3, #20]
          break;
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2bff      	cmp	r3, #255	; 0xff
 80014e6:	d801      	bhi.n	80014ec <HAL_GPIO_Init+0xec>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	e001      	b.n	80014f0 <HAL_GPIO_Init+0xf0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3304      	adds	r3, #4
 80014f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	d802      	bhi.n	80014fe <HAL_GPIO_Init+0xfe>
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x104>
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	3b08      	subs	r3, #8
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	210f      	movs	r1, #15
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	401a      	ands	r2, r3
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	431a      	orrs	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8096 	beq.w	800165e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001532:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_GPIO_Init+0x298>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a58      	ldr	r2, [pc, #352]	; (8001698 <HAL_GPIO_Init+0x298>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b56      	ldr	r3, [pc, #344]	; (8001698 <HAL_GPIO_Init+0x298>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800154a:	4a54      	ldr	r2, [pc, #336]	; (800169c <HAL_GPIO_Init+0x29c>)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4013      	ands	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_GPIO_Init+0x2a0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x19e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_GPIO_Init+0x2a4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x19a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_GPIO_Init+0x2a8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x196>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_GPIO_Init+0x2ac>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x192>
 800158e:	2303      	movs	r3, #3
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x1a0>
 8001592:	2304      	movs	r3, #4
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x1a0>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x1a0>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x1a0>
 800159e:	2300      	movs	r3, #0
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b0:	493a      	ldr	r1, [pc, #232]	; (800169c <HAL_GPIO_Init+0x29c>)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4938      	ldr	r1, [pc, #224]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	43db      	mvns	r3, r3
 80015e0:	4933      	ldr	r1, [pc, #204]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	492e      	ldr	r1, [pc, #184]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
 80015fe:	e006      	b.n	800160e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	43db      	mvns	r3, r3
 8001608:	4929      	ldr	r1, [pc, #164]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 800160a:	4013      	ands	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	4924      	ldr	r1, [pc, #144]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
 8001626:	e006      	b.n	8001636 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	43db      	mvns	r3, r3
 8001630:	491f      	ldr	r1, [pc, #124]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001632:	4013      	ands	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	491a      	ldr	r1, [pc, #104]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	60cb      	str	r3, [r1, #12]
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	43db      	mvns	r3, r3
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 800165a:	4013      	ands	r3, r2
 800165c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	f47f aed0 	bne.w	8001414 <HAL_GPIO_Init+0x14>
  }
}
 8001674:	bf00      	nop
 8001676:	372c      	adds	r7, #44	; 0x2c
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	10210000 	.word	0x10210000
 8001684:	10110000 	.word	0x10110000
 8001688:	10120000 	.word	0x10120000
 800168c:	10310000 	.word	0x10310000
 8001690:	10320000 	.word	0x10320000
 8001694:	10220000 	.word	0x10220000
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40011400 	.word	0x40011400
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	611a      	str	r2, [r3, #16]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43d9      	mvns	r1, r3
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	400b      	ands	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	611a      	str	r2, [r3, #16]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
	...

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e26c      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8087 	beq.w	8001846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b04      	cmp	r3, #4
 8001742:	d00c      	beq.n	800175e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001744:	4b8f      	ldr	r3, [pc, #572]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d112      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
 8001750:	4b8c      	ldr	r3, [pc, #560]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d10b      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4b89      	ldr	r3, [pc, #548]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d06c      	beq.n	8001844 <HAL_RCC_OscConfig+0x12c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d168      	bne.n	8001844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e246      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x76>
 8001780:	4b80      	ldr	r3, [pc, #512]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a7f      	ldr	r2, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e02e      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7a      	ldr	r2, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b78      	ldr	r3, [pc, #480]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a77      	ldr	r2, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01d      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0xbc>
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a71      	ldr	r2, [pc, #452]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6e      	ldr	r2, [pc, #440]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017d4:	4b6b      	ldr	r3, [pc, #428]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a6a      	ldr	r2, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b68      	ldr	r3, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a67      	ldr	r2, [pc, #412]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fafe 	bl	8000df4 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fafa 	bl	8000df4 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1fa      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0xe4>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff faea 	bl	8000df4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fae6 	bl	8000df4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1e6      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x10c>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d063      	beq.n	800191a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800185e:	4b49      	ldr	r3, [pc, #292]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d11c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d116      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	4b43      	ldr	r3, [pc, #268]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e1ba      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4939      	ldr	r1, [pc, #228]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	e03a      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x270>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa9f 	bl	8000df4 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fa9b 	bl	8000df4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e19b      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4927      	ldr	r1, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_OscConfig+0x270>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa7e 	bl	8000df4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff fa7a 	bl	8000df4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e17a      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03a      	beq.n	800199c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d019      	beq.n	8001962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_RCC_OscConfig+0x274>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fa5e 	bl	8000df4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fa5a 	bl	8000df4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e15a      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 fada 	bl	8001f14 <RCC_Delay>
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_RCC_OscConfig+0x274>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fa44 	bl	8000df4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196e:	e00f      	b.n	8001990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fa40 	bl	8000df4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d908      	bls.n	8001990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e140      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	42420000 	.word	0x42420000
 800198c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b9e      	ldr	r3, [pc, #632]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e9      	bne.n	8001970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a6 	beq.w	8001af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b97      	ldr	r3, [pc, #604]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b94      	ldr	r3, [pc, #592]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a93      	ldr	r2, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b91      	ldr	r3, [pc, #580]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b8e      	ldr	r3, [pc, #568]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a8a      	ldr	r2, [pc, #552]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa01 	bl	8000df4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff f9fd 	bl	8000df4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0fd      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b81      	ldr	r3, [pc, #516]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x312>
 8001a1c:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a7a      	ldr	r2, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	e02d      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x334>
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a75      	ldr	r2, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	e01c      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x356>
 8001a54:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a6c      	ldr	r2, [pc, #432]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a6e:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a66      	ldr	r2, [pc, #408]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d015      	beq.n	8001aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f9b1 	bl	8000df4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff f9ad 	bl	8000df4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0ab      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ee      	beq.n	8001a96 <HAL_RCC_OscConfig+0x37e>
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f99b 	bl	8000df4 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f997 	bl	8000df4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e095      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aea:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8081 	beq.w	8001c02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d061      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d146      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f96b 	bl	8000df4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f967 	bl	8000df4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e067      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	492d      	ldr	r1, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a19      	ldr	r1, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	4927      	ldr	r1, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f93b 	bl	8000df4 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f937 	bl	8000df4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e037      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46a>
 8001ba0:	e02f      	b.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f924 	bl	8000df4 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f920 	bl	8000df4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e020      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x498>
 8001bce:	e018      	b.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e013      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
 8001c14:	42420060 	.word	0x42420060

08001c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0d0      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4965      	ldr	r1, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d040      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e073      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4936      	ldr	r1, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f874 	bl	8000df4 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff f870 	bl	8000df4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e053      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d210      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f821 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001daa:	4601      	mov	r1, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	fa21 f303 	lsr.w	r3, r1, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ffd2 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08002f64 	.word	0x08002f64
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b490      	push	{r4, r7}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df4:	1d3c      	adds	r4, r7, #4
 8001df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x40>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x46>
 8001e2a:	e02d      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2e:	623b      	str	r3, [r7, #32]
      break;
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0c9b      	lsrs	r3, r3, #18
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e3e:	4413      	add	r3, r2
 8001e40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c5b      	lsrs	r3, r3, #17
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e5e:	4413      	add	r3, r2
 8001e60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e6a:	fb02 f203 	mul.w	r2, r2, r3
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	e004      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	623b      	str	r3, [r7, #32]
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e8a:	623b      	str	r3, [r7, #32]
      break;
 8001e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc90      	pop	{r4, r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	08002b50 	.word	0x08002b50
 8001ea0:	08002b60 	.word	0x08002b60
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	007a1200 	.word	0x007a1200
 8001eac:	003d0900 	.word	0x003d0900

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec8:	f7ff fff2 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4601      	mov	r1, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08002f74 	.word	0x08002f74

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08002f74 	.word	0x08002f74

08001f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <RCC_Delay+0x34>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <RCC_Delay+0x38>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0a5b      	lsrs	r3, r3, #9
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f30:	bf00      	nop
  }
  while (Delay --);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	60fa      	str	r2, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <RCC_Delay+0x1c>
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	10624dd3 	.word	0x10624dd3

08001f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e076      	b.n	8002050 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f72:	d009      	beq.n	8001f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
 8001f7a:	e005      	b.n	8001f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fd52 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	ea42 0103 	orr.w	r1, r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	0c1a      	lsrs	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f002 0204 	and.w	r2, r2, #4
 800202e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_SPI_Transmit_DMA+0x20>
 8002074:	2302      	movs	r3, #2
 8002076:	e09b      	b.n	80021b0 <HAL_SPI_Transmit_DMA+0x158>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d002      	beq.n	8002092 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800208c:	2302      	movs	r3, #2
 800208e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002090:	e089      	b.n	80021a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_SPI_Transmit_DMA+0x46>
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020a2:	e080      	b.n	80021a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2203      	movs	r2, #3
 80020a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ea:	d10f      	bne.n	800210c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800210a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002110:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <HAL_SPI_Transmit_DMA+0x160>)
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_SPI_Transmit_DMA+0x164>)
 800211a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_SPI_Transmit_DMA+0x168>)
 8002122:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	2200      	movs	r2, #0
 800212a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4619      	mov	r1, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002142:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002144:	f7fe ffc8 	bl	80010d8 <HAL_DMA_Start_IT>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002166:	e01e      	b.n	80021a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d007      	beq.n	8002186 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0202 	orr.w	r2, r2, #2
 80021a4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	080022a1 	.word	0x080022a1
 80021bc:	080021fb 	.word	0x080021fb
 80021c0:	080022bd 	.word	0x080022bd

080021c4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002208:	f7fe fdf4 	bl	8000df4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d03b      	beq.n	8002294 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0220 	bic.w	r2, r2, #32
 800222a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0202 	bic.w	r2, r2, #2
 800223a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	2164      	movs	r1, #100	; 0x64
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f000 f8e3 	bl	800240c <SPI_EndRxTxTransaction>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	f043 0220 	orr.w	r2, r3, #32
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800228c:	6978      	ldr	r0, [r7, #20]
 800228e:	f7ff ffab 	bl	80021e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002292:	e002      	b.n	800229a <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002294:	6978      	ldr	r0, [r7, #20]
 8002296:	f7ff ff95 	bl	80021c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff ff91 	bl	80021d6 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0203 	bic.w	r2, r2, #3
 80022d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff ff7a 	bl	80021e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800230c:	f7fe fd72 	bl	8000df4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4413      	add	r3, r2
 800231a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800231c:	f7fe fd6a 	bl	8000df4 <HAL_GetTick>
 8002320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	0d1b      	lsrs	r3, r3, #20
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002332:	e054      	b.n	80023de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d050      	beq.n	80023de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800233c:	f7fe fd5a 	bl	8000df4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	d902      	bls.n	8002352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d13d      	bne.n	80023ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236a:	d111      	bne.n	8002390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002374:	d004      	beq.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d107      	bne.n	8002390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002398:	d10f      	bne.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e017      	b.n	80023fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3b01      	subs	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4013      	ands	r3, r2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d19b      	bne.n	8002334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000

0800240c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2200      	movs	r2, #0
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff ff6a 	bl	80022fc <SPI_WaitFlagStateUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e000      	b.n	8002440 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e03f      	b.n	80024da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fb56 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f9cb 	bl	8002828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d11d      	bne.n	8002538 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_UART_Receive_DMA+0x26>
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e016      	b.n	800253a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_UART_Receive_DMA+0x38>
 8002516:	2302      	movs	r3, #2
 8002518:	e00f      	b.n	800253a <HAL_UART_Receive_DMA+0x58>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	461a      	mov	r2, r3
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f8d4 	bl	80026dc <UART_Start_Receive_DMA>
 8002534:	4603      	mov	r3, r0
 8002536:	e000      	b.n	800253a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002538:	2302      	movs	r3, #2
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d12a      	bne.n	80025ee <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025cc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0210 	bic.w	r2, r2, #16
 80025ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d106      	bne.n	8002604 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025fa:	4619      	mov	r1, r3
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ffb2 	bl	8002566 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002602:	e002      	b.n	800260a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7fd fdfd 	bl	8000204 <HAL_UART_RxCpltCallback>
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	2b01      	cmp	r3, #1
 8002626:	d108      	bne.n	800263a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff ff97 	bl	8002566 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002638:	e002      	b.n	8002640 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff ff81 	bl	8002542 <HAL_UART_RxHalfCpltCallback>
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b21      	cmp	r3, #33	; 0x21
 800267a:	d108      	bne.n	800268e <UART_DMAError+0x46>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2200      	movs	r2, #0
 8002686:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002688:	68b8      	ldr	r0, [r7, #8]
 800268a:	f000 f88b 	bl	80027a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b22      	cmp	r3, #34	; 0x22
 80026ae:	d108      	bne.n	80026c2 <UART_DMAError+0x7a>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80026bc:	68b8      	ldr	r0, [r7, #8]
 80026be:	f000 f886 	bl	80027ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0210 	orr.w	r2, r3, #16
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026ce:	68b8      	ldr	r0, [r7, #8]
 80026d0:	f7ff ff40 	bl	8002554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2222      	movs	r2, #34	; 0x22
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <UART_Start_Receive_DMA+0xbc>)
 800270a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	4a22      	ldr	r2, [pc, #136]	; (800279c <UART_Start_Receive_DMA+0xc0>)
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <UART_Start_Receive_DMA+0xc4>)
 800271a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	2200      	movs	r2, #0
 8002722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002724:	f107 0308 	add.w	r3, r7, #8
 8002728:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	f7fe fccc 	bl	80010d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800278c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	0800257d 	.word	0x0800257d
 800279c:	08002613 	.word	0x08002613
 80027a0:	08002649 	.word	0x08002649

080027a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80027ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0210 	bic.w	r2, r2, #16
 800280c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002862:	f023 030c 	bic.w	r3, r3, #12
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	430b      	orrs	r3, r1
 800286e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <UART_SetConfig+0x114>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d103      	bne.n	8002898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002890:	f7ff fb2c 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	e002      	b.n	800289e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002898:	f7ff fb14 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 800289c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009a      	lsls	r2, r3, #2
 80028a8:	441a      	add	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <UART_SetConfig+0x118>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	0119      	lsls	r1, r3, #4
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <UART_SetConfig+0x118>)
 80028d6:	fba3 0302 	umull	r0, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2064      	movs	r0, #100	; 0x64
 80028de:	fb00 f303 	mul.w	r3, r0, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <UART_SetConfig+0x118>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f4:	4419      	add	r1, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <UART_SetConfig+0x118>)
 800290e:	fba3 0302 	umull	r0, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2064      	movs	r0, #100	; 0x64
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	3332      	adds	r3, #50	; 0x32
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <UART_SetConfig+0x118>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	440a      	add	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40013800 	.word	0x40013800
 8002940:	51eb851f 	.word	0x51eb851f

08002944 <__errno>:
 8002944:	4b01      	ldr	r3, [pc, #4]	; (800294c <__errno+0x8>)
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	2000000c 	.word	0x2000000c

08002950 <__libc_init_array>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	2500      	movs	r5, #0
 8002954:	4e0c      	ldr	r6, [pc, #48]	; (8002988 <__libc_init_array+0x38>)
 8002956:	4c0d      	ldr	r4, [pc, #52]	; (800298c <__libc_init_array+0x3c>)
 8002958:	1ba4      	subs	r4, r4, r6
 800295a:	10a4      	asrs	r4, r4, #2
 800295c:	42a5      	cmp	r5, r4
 800295e:	d109      	bne.n	8002974 <__libc_init_array+0x24>
 8002960:	f000 f8ea 	bl	8002b38 <_init>
 8002964:	2500      	movs	r5, #0
 8002966:	4e0a      	ldr	r6, [pc, #40]	; (8002990 <__libc_init_array+0x40>)
 8002968:	4c0a      	ldr	r4, [pc, #40]	; (8002994 <__libc_init_array+0x44>)
 800296a:	1ba4      	subs	r4, r4, r6
 800296c:	10a4      	asrs	r4, r4, #2
 800296e:	42a5      	cmp	r5, r4
 8002970:	d105      	bne.n	800297e <__libc_init_array+0x2e>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002978:	4798      	blx	r3
 800297a:	3501      	adds	r5, #1
 800297c:	e7ee      	b.n	800295c <__libc_init_array+0xc>
 800297e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002982:	4798      	blx	r3
 8002984:	3501      	adds	r5, #1
 8002986:	e7f2      	b.n	800296e <__libc_init_array+0x1e>
 8002988:	08002f7c 	.word	0x08002f7c
 800298c:	08002f7c 	.word	0x08002f7c
 8002990:	08002f7c 	.word	0x08002f7c
 8002994:	08002f80 	.word	0x08002f80

08002998 <malloc>:
 8002998:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <malloc+0xc>)
 800299a:	4601      	mov	r1, r0
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	f000 b85f 	b.w	8002a60 <_malloc_r>
 80029a2:	bf00      	nop
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <free>:
 80029a8:	4b02      	ldr	r3, [pc, #8]	; (80029b4 <free+0xc>)
 80029aa:	4601      	mov	r1, r0
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	f000 b80b 	b.w	80029c8 <_free_r>
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <memset>:
 80029b8:	4603      	mov	r3, r0
 80029ba:	4402      	add	r2, r0
 80029bc:	4293      	cmp	r3, r2
 80029be:	d100      	bne.n	80029c2 <memset+0xa>
 80029c0:	4770      	bx	lr
 80029c2:	f803 1b01 	strb.w	r1, [r3], #1
 80029c6:	e7f9      	b.n	80029bc <memset+0x4>

080029c8 <_free_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4605      	mov	r5, r0
 80029cc:	2900      	cmp	r1, #0
 80029ce:	d043      	beq.n	8002a58 <_free_r+0x90>
 80029d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029d4:	1f0c      	subs	r4, r1, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bfb8      	it	lt
 80029da:	18e4      	addlt	r4, r4, r3
 80029dc:	f000 f8aa 	bl	8002b34 <__malloc_lock>
 80029e0:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <_free_r+0x94>)
 80029e2:	6813      	ldr	r3, [r2, #0]
 80029e4:	4610      	mov	r0, r2
 80029e6:	b933      	cbnz	r3, 80029f6 <_free_r+0x2e>
 80029e8:	6063      	str	r3, [r4, #4]
 80029ea:	6014      	str	r4, [r2, #0]
 80029ec:	4628      	mov	r0, r5
 80029ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029f2:	f000 b8a0 	b.w	8002b36 <__malloc_unlock>
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	d90b      	bls.n	8002a12 <_free_r+0x4a>
 80029fa:	6821      	ldr	r1, [r4, #0]
 80029fc:	1862      	adds	r2, r4, r1
 80029fe:	4293      	cmp	r3, r2
 8002a00:	bf01      	itttt	eq
 8002a02:	681a      	ldreq	r2, [r3, #0]
 8002a04:	685b      	ldreq	r3, [r3, #4]
 8002a06:	1852      	addeq	r2, r2, r1
 8002a08:	6022      	streq	r2, [r4, #0]
 8002a0a:	6063      	str	r3, [r4, #4]
 8002a0c:	6004      	str	r4, [r0, #0]
 8002a0e:	e7ed      	b.n	80029ec <_free_r+0x24>
 8002a10:	4613      	mov	r3, r2
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	b10a      	cbz	r2, 8002a1a <_free_r+0x52>
 8002a16:	42a2      	cmp	r2, r4
 8002a18:	d9fa      	bls.n	8002a10 <_free_r+0x48>
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	1858      	adds	r0, r3, r1
 8002a1e:	42a0      	cmp	r0, r4
 8002a20:	d10b      	bne.n	8002a3a <_free_r+0x72>
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	4401      	add	r1, r0
 8002a26:	1858      	adds	r0, r3, r1
 8002a28:	4282      	cmp	r2, r0
 8002a2a:	6019      	str	r1, [r3, #0]
 8002a2c:	d1de      	bne.n	80029ec <_free_r+0x24>
 8002a2e:	6810      	ldr	r0, [r2, #0]
 8002a30:	6852      	ldr	r2, [r2, #4]
 8002a32:	4401      	add	r1, r0
 8002a34:	6019      	str	r1, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	e7d8      	b.n	80029ec <_free_r+0x24>
 8002a3a:	d902      	bls.n	8002a42 <_free_r+0x7a>
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	e7d4      	b.n	80029ec <_free_r+0x24>
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	1821      	adds	r1, r4, r0
 8002a46:	428a      	cmp	r2, r1
 8002a48:	bf01      	itttt	eq
 8002a4a:	6811      	ldreq	r1, [r2, #0]
 8002a4c:	6852      	ldreq	r2, [r2, #4]
 8002a4e:	1809      	addeq	r1, r1, r0
 8002a50:	6021      	streq	r1, [r4, #0]
 8002a52:	6062      	str	r2, [r4, #4]
 8002a54:	605c      	str	r4, [r3, #4]
 8002a56:	e7c9      	b.n	80029ec <_free_r+0x24>
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000094 	.word	0x20000094

08002a60 <_malloc_r>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	1ccd      	adds	r5, r1, #3
 8002a64:	f025 0503 	bic.w	r5, r5, #3
 8002a68:	3508      	adds	r5, #8
 8002a6a:	2d0c      	cmp	r5, #12
 8002a6c:	bf38      	it	cc
 8002a6e:	250c      	movcc	r5, #12
 8002a70:	2d00      	cmp	r5, #0
 8002a72:	4606      	mov	r6, r0
 8002a74:	db01      	blt.n	8002a7a <_malloc_r+0x1a>
 8002a76:	42a9      	cmp	r1, r5
 8002a78:	d903      	bls.n	8002a82 <_malloc_r+0x22>
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	6033      	str	r3, [r6, #0]
 8002a7e:	2000      	movs	r0, #0
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
 8002a82:	f000 f857 	bl	8002b34 <__malloc_lock>
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <_malloc_r+0xac>)
 8002a88:	6814      	ldr	r4, [r2, #0]
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	b991      	cbnz	r1, 8002ab4 <_malloc_r+0x54>
 8002a8e:	4c20      	ldr	r4, [pc, #128]	; (8002b10 <_malloc_r+0xb0>)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	b91b      	cbnz	r3, 8002a9c <_malloc_r+0x3c>
 8002a94:	4630      	mov	r0, r6
 8002a96:	f000 f83d 	bl	8002b14 <_sbrk_r>
 8002a9a:	6020      	str	r0, [r4, #0]
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f000 f838 	bl	8002b14 <_sbrk_r>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d124      	bne.n	8002af2 <_malloc_r+0x92>
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	4630      	mov	r0, r6
 8002aac:	6033      	str	r3, [r6, #0]
 8002aae:	f000 f842 	bl	8002b36 <__malloc_unlock>
 8002ab2:	e7e4      	b.n	8002a7e <_malloc_r+0x1e>
 8002ab4:	680b      	ldr	r3, [r1, #0]
 8002ab6:	1b5b      	subs	r3, r3, r5
 8002ab8:	d418      	bmi.n	8002aec <_malloc_r+0x8c>
 8002aba:	2b0b      	cmp	r3, #11
 8002abc:	d90f      	bls.n	8002ade <_malloc_r+0x7e>
 8002abe:	600b      	str	r3, [r1, #0]
 8002ac0:	18cc      	adds	r4, r1, r3
 8002ac2:	50cd      	str	r5, [r1, r3]
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f000 f836 	bl	8002b36 <__malloc_unlock>
 8002aca:	f104 000b 	add.w	r0, r4, #11
 8002ace:	1d23      	adds	r3, r4, #4
 8002ad0:	f020 0007 	bic.w	r0, r0, #7
 8002ad4:	1ac3      	subs	r3, r0, r3
 8002ad6:	d0d3      	beq.n	8002a80 <_malloc_r+0x20>
 8002ad8:	425a      	negs	r2, r3
 8002ada:	50e2      	str	r2, [r4, r3]
 8002adc:	e7d0      	b.n	8002a80 <_malloc_r+0x20>
 8002ade:	684b      	ldr	r3, [r1, #4]
 8002ae0:	428c      	cmp	r4, r1
 8002ae2:	bf16      	itet	ne
 8002ae4:	6063      	strne	r3, [r4, #4]
 8002ae6:	6013      	streq	r3, [r2, #0]
 8002ae8:	460c      	movne	r4, r1
 8002aea:	e7eb      	b.n	8002ac4 <_malloc_r+0x64>
 8002aec:	460c      	mov	r4, r1
 8002aee:	6849      	ldr	r1, [r1, #4]
 8002af0:	e7cc      	b.n	8002a8c <_malloc_r+0x2c>
 8002af2:	1cc4      	adds	r4, r0, #3
 8002af4:	f024 0403 	bic.w	r4, r4, #3
 8002af8:	42a0      	cmp	r0, r4
 8002afa:	d005      	beq.n	8002b08 <_malloc_r+0xa8>
 8002afc:	1a21      	subs	r1, r4, r0
 8002afe:	4630      	mov	r0, r6
 8002b00:	f000 f808 	bl	8002b14 <_sbrk_r>
 8002b04:	3001      	adds	r0, #1
 8002b06:	d0cf      	beq.n	8002aa8 <_malloc_r+0x48>
 8002b08:	6025      	str	r5, [r4, #0]
 8002b0a:	e7db      	b.n	8002ac4 <_malloc_r+0x64>
 8002b0c:	20000094 	.word	0x20000094
 8002b10:	20000098 	.word	0x20000098

08002b14 <_sbrk_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	2300      	movs	r3, #0
 8002b18:	4c05      	ldr	r4, [pc, #20]	; (8002b30 <_sbrk_r+0x1c>)
 8002b1a:	4605      	mov	r5, r0
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	6023      	str	r3, [r4, #0]
 8002b20:	f7fe f8ae 	bl	8000c80 <_sbrk>
 8002b24:	1c43      	adds	r3, r0, #1
 8002b26:	d102      	bne.n	8002b2e <_sbrk_r+0x1a>
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	b103      	cbz	r3, 8002b2e <_sbrk_r+0x1a>
 8002b2c:	602b      	str	r3, [r5, #0]
 8002b2e:	bd38      	pop	{r3, r4, r5, pc}
 8002b30:	20000230 	.word	0x20000230

08002b34 <__malloc_lock>:
 8002b34:	4770      	bx	lr

08002b36 <__malloc_unlock>:
 8002b36:	4770      	bx	lr

08002b38 <_init>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	bf00      	nop
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr

08002b44 <_fini>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr
