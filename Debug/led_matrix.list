
led_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002750  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000000c  08002c9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08002c9c  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000759d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015e4  00000000  00000000  000275d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000890  00000000  00000000  00028bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  00029448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162b2  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bba  00000000  00000000  0003ff02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fdb5  00000000  00000000  00046abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6871  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002258  00000000  00000000  000c68ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002844 	.word	0x08002844

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002844 	.word	0x08002844

0800014c <ascii_to_matrix>:
void ascii_to_matrix (uint8_t buf[], uint8_t pointer, uint8_t output[][8]);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ascii_to_matrix (uint8_t buf[NUM_CHAR], uint8_t pointer, uint8_t output[NUM_CHAR][8]){
 800014c:	b490      	push	{r4, r7}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]
	uint8_t i,j;
	for (i=0; i<4;i++){
 800015a:	2300      	movs	r3, #0
 800015c:	75fb      	strb	r3, [r7, #23]
 800015e:	e012      	b.n	8000186 <ascii_to_matrix+0x3a>
		for (j=0;j<8;j++){
 8000160:	2300      	movs	r3, #0
 8000162:	75bb      	strb	r3, [r7, #22]
 8000164:	e009      	b.n	800017a <ascii_to_matrix+0x2e>
			output[i][j] = 0x00;
 8000166:	7dfb      	ldrb	r3, [r7, #23]
 8000168:	00db      	lsls	r3, r3, #3
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	441a      	add	r2, r3
 800016e:	7dbb      	ldrb	r3, [r7, #22]
 8000170:	2100      	movs	r1, #0
 8000172:	54d1      	strb	r1, [r2, r3]
		for (j=0;j<8;j++){
 8000174:	7dbb      	ldrb	r3, [r7, #22]
 8000176:	3301      	adds	r3, #1
 8000178:	75bb      	strb	r3, [r7, #22]
 800017a:	7dbb      	ldrb	r3, [r7, #22]
 800017c:	2b07      	cmp	r3, #7
 800017e:	d9f2      	bls.n	8000166 <ascii_to_matrix+0x1a>
	for (i=0; i<4;i++){
 8000180:	7dfb      	ldrb	r3, [r7, #23]
 8000182:	3301      	adds	r3, #1
 8000184:	75fb      	strb	r3, [r7, #23]
 8000186:	7dfb      	ldrb	r3, [r7, #23]
 8000188:	2b03      	cmp	r3, #3
 800018a:	d9e9      	bls.n	8000160 <ascii_to_matrix+0x14>
		}
	}
	for (i=0; i<pointer; i++){
 800018c:	2300      	movs	r3, #0
 800018e:	75fb      	strb	r3, [r7, #23]
 8000190:	e01d      	b.n	80001ce <ascii_to_matrix+0x82>
		for(j = 0; j<8; j++){
 8000192:	2300      	movs	r3, #0
 8000194:	75bb      	strb	r3, [r7, #22]
 8000196:	e014      	b.n	80001c2 <ascii_to_matrix+0x76>
						output[i+4][j] = FONT[buf[i]][j];
 8000198:	7dfb      	ldrb	r3, [r7, #23]
 800019a:	68fa      	ldr	r2, [r7, #12]
 800019c:	4413      	add	r3, r2
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	7db9      	ldrb	r1, [r7, #22]
 80001a4:	7dfb      	ldrb	r3, [r7, #23]
 80001a6:	3304      	adds	r3, #4
 80001a8:	00db      	lsls	r3, r3, #3
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	441a      	add	r2, r3
 80001ae:	7dbb      	ldrb	r3, [r7, #22]
 80001b0:	4c0b      	ldr	r4, [pc, #44]	; (80001e0 <ascii_to_matrix+0x94>)
 80001b2:	00c0      	lsls	r0, r0, #3
 80001b4:	4420      	add	r0, r4
 80001b6:	4401      	add	r1, r0
 80001b8:	7809      	ldrb	r1, [r1, #0]
 80001ba:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j<8; j++){
 80001bc:	7dbb      	ldrb	r3, [r7, #22]
 80001be:	3301      	adds	r3, #1
 80001c0:	75bb      	strb	r3, [r7, #22]
 80001c2:	7dbb      	ldrb	r3, [r7, #22]
 80001c4:	2b07      	cmp	r3, #7
 80001c6:	d9e7      	bls.n	8000198 <ascii_to_matrix+0x4c>
	for (i=0; i<pointer; i++){
 80001c8:	7dfb      	ldrb	r3, [r7, #23]
 80001ca:	3301      	adds	r3, #1
 80001cc:	75fb      	strb	r3, [r7, #23]
 80001ce:	7dfa      	ldrb	r2, [r7, #23]
 80001d0:	7afb      	ldrb	r3, [r7, #11]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d3dd      	bcc.n	8000192 <ascii_to_matrix+0x46>
					}
	}

}
 80001d6:	bf00      	nop
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc90      	pop	{r4, r7}
 80001de:	4770      	bx	lr
 80001e0:	08002870 	.word	0x08002870

080001e4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	if(huart->Instance == huart2.Instance)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b21      	ldr	r3, [pc, #132]	; (8000278 <HAL_UART_RxCpltCallback+0x94>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d13a      	bne.n	800026e <HAL_UART_RxCpltCallback+0x8a>
	{
		if (uart_rx =='\n'){
 80001f8:	4b20      	ldr	r3, [pc, #128]	; (800027c <HAL_UART_RxCpltCallback+0x98>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	2b0a      	cmp	r3, #10
 80001fe:	d124      	bne.n	800024a <HAL_UART_RxCpltCallback+0x66>
			for (i=0; i<NUM_CHAR; i++){
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e013      	b.n	800022e <HAL_UART_RxCpltCallback+0x4a>
				for (j=0; j<8; j++){
 8000206:	2300      	movs	r3, #0
 8000208:	73bb      	strb	r3, [r7, #14]
 800020a:	e00a      	b.n	8000222 <HAL_UART_RxCpltCallback+0x3e>
					output_arr[i][j] = 0;
 800020c:	7bfa      	ldrb	r2, [r7, #15]
 800020e:	7bbb      	ldrb	r3, [r7, #14]
 8000210:	491b      	ldr	r1, [pc, #108]	; (8000280 <HAL_UART_RxCpltCallback+0x9c>)
 8000212:	00d2      	lsls	r2, r2, #3
 8000214:	440a      	add	r2, r1
 8000216:	4413      	add	r3, r2
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
				for (j=0; j<8; j++){
 800021c:	7bbb      	ldrb	r3, [r7, #14]
 800021e:	3301      	adds	r3, #1
 8000220:	73bb      	strb	r3, [r7, #14]
 8000222:	7bbb      	ldrb	r3, [r7, #14]
 8000224:	2b07      	cmp	r3, #7
 8000226:	d9f1      	bls.n	800020c <HAL_UART_RxCpltCallback+0x28>
			for (i=0; i<NUM_CHAR; i++){
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	3301      	adds	r3, #1
 800022c:	73fb      	strb	r3, [r7, #15]
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	2b31      	cmp	r3, #49	; 0x31
 8000232:	d9e8      	bls.n	8000206 <HAL_UART_RxCpltCallback+0x22>
				}
			}
			ascii_to_matrix (uart_rx_buf, uart_rx_pointer,  output_arr);
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <HAL_UART_RxCpltCallback+0xa0>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4a11      	ldr	r2, [pc, #68]	; (8000280 <HAL_UART_RxCpltCallback+0x9c>)
 800023a:	4619      	mov	r1, r3
 800023c:	4812      	ldr	r0, [pc, #72]	; (8000288 <HAL_UART_RxCpltCallback+0xa4>)
 800023e:	f7ff ff85 	bl	800014c <ascii_to_matrix>
			uart_rx_pointer = 0;
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <HAL_UART_RxCpltCallback+0xa0>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e00c      	b.n	8000264 <HAL_UART_RxCpltCallback+0x80>

		}
		else{
			uart_rx_buf[uart_rx_pointer] = uart_rx;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <HAL_UART_RxCpltCallback+0xa0>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	461a      	mov	r2, r3
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <HAL_UART_RxCpltCallback+0x98>)
 8000252:	7819      	ldrb	r1, [r3, #0]
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <HAL_UART_RxCpltCallback+0xa4>)
 8000256:	5499      	strb	r1, [r3, r2]
			uart_rx_pointer++;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <HAL_UART_RxCpltCallback+0xa0>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <HAL_UART_RxCpltCallback+0xa0>)
 8000262:	701a      	strb	r2, [r3, #0]

		}
		HAL_UART_Receive_DMA(&huart2, &uart_rx, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	4905      	ldr	r1, [pc, #20]	; (800027c <HAL_UART_RxCpltCallback+0x98>)
 8000268:	4803      	ldr	r0, [pc, #12]	; (8000278 <HAL_UART_RxCpltCallback+0x94>)
 800026a:	f002 f88e 	bl	800238a <HAL_UART_Receive_DMA>
	}
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	200000fc 	.word	0x200000fc
 800027c:	20000029 	.word	0x20000029
 8000280:	20000184 	.word	0x20000184
 8000284:	20000028 	.word	0x20000028
 8000288:	200000c8 	.word	0x200000c8

0800028c <data_to_module>:
// push data to module
void data_to_module (uint8_t output [][(8*NUM_VER_MODULE)]){
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	uint32_t i;
	int32_t j;
	uint8_t addr;
	for (i = 0; i<(8*NUM_VER_MODULE); i++){
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	e030      	b.n	80002fc <data_to_module+0x70>
				for (j = NUM_HOR_MODULE-1; j >= 0; j--){
 800029a:	2303      	movs	r3, #3
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	e01b      	b.n	80002d8 <data_to_module+0x4c>
					addr = i+1;
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	73fb      	strb	r3, [r7, #15]
					HAL_SPI_Transmit_DMA(&hspi2, &addr, 1);
 80002aa:	f107 030f 	add.w	r3, r7, #15
 80002ae:	2201      	movs	r2, #1
 80002b0:	4619      	mov	r1, r3
 80002b2:	4816      	ldr	r0, [pc, #88]	; (800030c <data_to_module+0x80>)
 80002b4:	f001 fe24 	bl	8001f00 <HAL_SPI_Transmit_DMA>
					HAL_SPI_Transmit_DMA(&hspi2, &output[j][7-i], 1);
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	00db      	lsls	r3, r3, #3
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	441a      	add	r2, r3
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	f1c3 0307 	rsb	r3, r3, #7
 80002c6:	4413      	add	r3, r2
 80002c8:	2201      	movs	r2, #1
 80002ca:	4619      	mov	r1, r3
 80002cc:	480f      	ldr	r0, [pc, #60]	; (800030c <data_to_module+0x80>)
 80002ce:	f001 fe17 	bl	8001f00 <HAL_SPI_Transmit_DMA>
				for (j = NUM_HOR_MODULE-1; j >= 0; j--){
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	613b      	str	r3, [r7, #16]
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	dae0      	bge.n	80002a0 <data_to_module+0x14>
				}
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80002de:	2201      	movs	r2, #1
 80002e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e4:	480a      	ldr	r0, [pc, #40]	; (8000310 <data_to_module+0x84>)
 80002e6:	f001 f939 	bl	800155c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <data_to_module+0x84>)
 80002f2:	f001 f933 	bl	800155c <HAL_GPIO_WritePin>
	for (i = 0; i<(8*NUM_VER_MODULE); i++){
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	3301      	adds	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	2b07      	cmp	r3, #7
 8000300:	d9cb      	bls.n	800029a <data_to_module+0xe>
			}

}
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000070 	.word	0x20000070
 8000310:	40010c00 	.word	0x40010c00

08000314 <Rotate>:
// ham xoay bit sang phai
void Rotate (uint8_t ArrTemp[][(8*NUM_VER_MODULE)]){
 8000314:	b480      	push	{r7}
 8000316:	b093      	sub	sp, #76	; 0x4c
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	uint8_t smark [NUM_CHAR];

	for (j=0; j<(8*NUM_VER_MODULE); j++){
 800031c:	2300      	movs	r3, #0
 800031e:	643b      	str	r3, [r7, #64]	; 0x40
 8000320:	e0a4      	b.n	800046c <Rotate+0x158>
		smark[0] = ArrTemp[0][j] & 0x01;
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	733b      	strb	r3, [r7, #12]
		smark[0] = smark[0] << 07;
 8000332:	7b3b      	ldrb	r3, [r7, #12]
 8000334:	01db      	lsls	r3, r3, #7
 8000336:	b2db      	uxtb	r3, r3
 8000338:	733b      	strb	r3, [r7, #12]

		smark[NUM_CHAR-1] = ArrTemp[NUM_CHAR-1][j] & 0x01;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	b2db      	uxtb	r3, r3
 800034c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		smark[NUM_CHAR-1] = smark[NUM_CHAR-1] << 07;
 8000350:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000354:	01db      	lsls	r3, r3, #7
 8000356:	b2db      	uxtb	r3, r3
 8000358:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		ArrTemp[NUM_CHAR-1][j] = ArrTemp[NUM_CHAR-1][j] >> 1;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000364:	4413      	add	r3, r2
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	f502 72c4 	add.w	r2, r2, #392	; 0x188
 800036e:	085b      	lsrs	r3, r3, #1
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000374:	4413      	add	r3, r2
 8000376:	460a      	mov	r2, r1
 8000378:	701a      	strb	r2, [r3, #0]
		ArrTemp[NUM_CHAR-1][j] |= smark[0];
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000382:	4413      	add	r3, r2
 8000384:	7819      	ldrb	r1, [r3, #0]
 8000386:	7b3b      	ldrb	r3, [r7, #12]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	f502 72c4 	add.w	r2, r2, #392	; 0x188
 800038e:	430b      	orrs	r3, r1
 8000390:	b2d9      	uxtb	r1, r3
 8000392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000394:	4413      	add	r3, r2
 8000396:	460a      	mov	r2, r1
 8000398:	701a      	strb	r2, [r3, #0]

		for (i = NUM_CHAR-2; i>0; i--){
 800039a:	2330      	movs	r3, #48	; 0x30
 800039c:	647b      	str	r3, [r7, #68]	; 0x44
 800039e:	e048      	b.n	8000432 <Rotate+0x11e>
			smark[i] = ArrTemp[i][j] & 0x01;
 80003a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	441a      	add	r2, r3
 80003a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003aa:	4413      	add	r3, r2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	b2d9      	uxtb	r1, r3
 80003b4:	f107 020c 	add.w	r2, r7, #12
 80003b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003ba:	4413      	add	r3, r2
 80003bc:	460a      	mov	r2, r1
 80003be:	701a      	strb	r2, [r3, #0]
			smark[i] = smark[i] << 07;
 80003c0:	f107 020c 	add.w	r2, r7, #12
 80003c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	01db      	lsls	r3, r3, #7
 80003cc:	b2d9      	uxtb	r1, r3
 80003ce:	f107 020c 	add.w	r2, r7, #12
 80003d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003d4:	4413      	add	r3, r2
 80003d6:	460a      	mov	r2, r1
 80003d8:	701a      	strb	r2, [r3, #0]
			ArrTemp[i][j] = ArrTemp[i][j] >> 1;
 80003da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	441a      	add	r2, r3
 80003e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003e4:	4413      	add	r3, r2
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80003ea:	00d2      	lsls	r2, r2, #3
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	440a      	add	r2, r1
 80003f0:	085b      	lsrs	r3, r3, #1
 80003f2:	b2d9      	uxtb	r1, r3
 80003f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003f6:	4413      	add	r3, r2
 80003f8:	460a      	mov	r2, r1
 80003fa:	701a      	strb	r2, [r3, #0]
			ArrTemp[i][j] |= smark[i+1];
 80003fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	441a      	add	r2, r3
 8000404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000406:	4413      	add	r3, r2
 8000408:	7819      	ldrb	r1, [r3, #0]
 800040a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800040c:	3301      	adds	r3, #1
 800040e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000412:	4413      	add	r3, r2
 8000414:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8000418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800041a:	00d2      	lsls	r2, r2, #3
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	4402      	add	r2, r0
 8000420:	430b      	orrs	r3, r1
 8000422:	b2d9      	uxtb	r1, r3
 8000424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000426:	4413      	add	r3, r2
 8000428:	460a      	mov	r2, r1
 800042a:	701a      	strb	r2, [r3, #0]
		for (i = NUM_CHAR-2; i>0; i--){
 800042c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800042e:	3b01      	subs	r3, #1
 8000430:	647b      	str	r3, [r7, #68]	; 0x44
 8000432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1b3      	bne.n	80003a0 <Rotate+0x8c>
		}

		ArrTemp[0][j] = ArrTemp[0][j] >> 1;
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800043c:	4413      	add	r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	085b      	lsrs	r3, r3, #1
 8000442:	b2d9      	uxtb	r1, r3
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000448:	4413      	add	r3, r2
 800044a:	460a      	mov	r2, r1
 800044c:	701a      	strb	r2, [r3, #0]
		ArrTemp[0][j] |= smark[1];
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000452:	4413      	add	r3, r2
 8000454:	781a      	ldrb	r2, [r3, #0]
 8000456:	7b7b      	ldrb	r3, [r7, #13]
 8000458:	4313      	orrs	r3, r2
 800045a:	b2d9      	uxtb	r1, r3
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000460:	4413      	add	r3, r2
 8000462:	460a      	mov	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
	for (j=0; j<(8*NUM_VER_MODULE); j++){
 8000466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000468:	3301      	adds	r3, #1
 800046a:	643b      	str	r3, [r7, #64]	; 0x40
 800046c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800046e:	2b07      	cmp	r3, #7
 8000470:	f67f af57 	bls.w	8000322 <Rotate+0xe>
	}
}
 8000474:	bf00      	nop
 8000476:	374c      	adds	r7, #76	; 0x4c
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
	...

08000480 <Max7219_Config>:
void Max7219_Config(void){
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
	uint8_t decode_mode = 0x09;
 8000486:	2309      	movs	r3, #9
 8000488:	73bb      	strb	r3, [r7, #14]
	uint8_t intensity = 0x0A;
 800048a:	230a      	movs	r3, #10
 800048c:	737b      	strb	r3, [r7, #13]
	uint8_t scan_limit = 0x0B;
 800048e:	230b      	movs	r3, #11
 8000490:	733b      	strb	r3, [r7, #12]
	uint8_t shut_down = 0x0C;
 8000492:	230c      	movs	r3, #12
 8000494:	72fb      	strb	r3, [r7, #11]
	uint8_t display_test = 0x0F;
 8000496:	230f      	movs	r3, #15
 8000498:	72bb      	strb	r3, [r7, #10]
	uint8_t mode_0 = 0x00;
 800049a:	2300      	movs	r3, #0
 800049c:	727b      	strb	r3, [r7, #9]
	uint8_t mode_1 = 0x03;
 800049e:	2303      	movs	r3, #3
 80004a0:	723b      	strb	r3, [r7, #8]
	uint8_t mode_2 = 0x07;
 80004a2:	2307      	movs	r3, #7
 80004a4:	71fb      	strb	r3, [r7, #7]
	uint8_t mode_3 = 0x01;
 80004a6:	2301      	movs	r3, #1
 80004a8:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80004aa:	2300      	movs	r3, #0
 80004ac:	73fb      	strb	r3, [r7, #15]
 80004ae:	e010      	b.n	80004d2 <Max7219_Config+0x52>
		HAL_SPI_Transmit_DMA( &hspi2, &decode_mode, 1);
 80004b0:	f107 030e 	add.w	r3, r7, #14
 80004b4:	2201      	movs	r2, #1
 80004b6:	4619      	mov	r1, r3
 80004b8:	4854      	ldr	r0, [pc, #336]	; (800060c <Max7219_Config+0x18c>)
 80004ba:	f001 fd21 	bl	8001f00 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_0, 1);
 80004be:	f107 0309 	add.w	r3, r7, #9
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	4851      	ldr	r0, [pc, #324]	; (800060c <Max7219_Config+0x18c>)
 80004c8:	f001 fd1a 	bl	8001f00 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	3301      	adds	r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d9eb      	bls.n	80004b0 <Max7219_Config+0x30>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	484c      	ldr	r0, [pc, #304]	; (8000610 <Max7219_Config+0x190>)
 80004e0:	f001 f83c 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ea:	4849      	ldr	r0, [pc, #292]	; (8000610 <Max7219_Config+0x190>)
 80004ec:	f001 f836 	bl	800155c <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e010      	b.n	8000518 <Max7219_Config+0x98>
		HAL_SPI_Transmit_DMA( &hspi2, &intensity, 1);
 80004f6:	f107 030d 	add.w	r3, r7, #13
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4843      	ldr	r0, [pc, #268]	; (800060c <Max7219_Config+0x18c>)
 8000500:	f001 fcfe 	bl	8001f00 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_1, 1);
 8000504:	f107 0308 	add.w	r3, r7, #8
 8000508:	2201      	movs	r2, #1
 800050a:	4619      	mov	r1, r3
 800050c:	483f      	ldr	r0, [pc, #252]	; (800060c <Max7219_Config+0x18c>)
 800050e:	f001 fcf7 	bl	8001f00 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	3301      	adds	r3, #1
 8000516:	73fb      	strb	r3, [r7, #15]
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d9eb      	bls.n	80004f6 <Max7219_Config+0x76>
		}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000524:	483a      	ldr	r0, [pc, #232]	; (8000610 <Max7219_Config+0x190>)
 8000526:	f001 f819 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	4837      	ldr	r0, [pc, #220]	; (8000610 <Max7219_Config+0x190>)
 8000532:	f001 f813 	bl	800155c <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000536:	2300      	movs	r3, #0
 8000538:	73fb      	strb	r3, [r7, #15]
 800053a:	e00f      	b.n	800055c <Max7219_Config+0xdc>
		HAL_SPI_Transmit_DMA( &hspi2, &scan_limit, 1);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2201      	movs	r2, #1
 8000542:	4619      	mov	r1, r3
 8000544:	4831      	ldr	r0, [pc, #196]	; (800060c <Max7219_Config+0x18c>)
 8000546:	f001 fcdb 	bl	8001f00 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_2, 1);
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	482e      	ldr	r0, [pc, #184]	; (800060c <Max7219_Config+0x18c>)
 8000552:	f001 fcd5 	bl	8001f00 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	3301      	adds	r3, #1
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d9ec      	bls.n	800053c <Max7219_Config+0xbc>
			}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000568:	4829      	ldr	r0, [pc, #164]	; (8000610 <Max7219_Config+0x190>)
 800056a:	f000 fff7 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	4826      	ldr	r0, [pc, #152]	; (8000610 <Max7219_Config+0x190>)
 8000576:	f000 fff1 	bl	800155c <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e00f      	b.n	80005a0 <Max7219_Config+0x120>
		HAL_SPI_Transmit_DMA( &hspi2, &shut_down, 1);
 8000580:	f107 030b 	add.w	r3, r7, #11
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	4820      	ldr	r0, [pc, #128]	; (800060c <Max7219_Config+0x18c>)
 800058a:	f001 fcb9 	bl	8001f00 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_3, 1);
 800058e:	1dbb      	adds	r3, r7, #6
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	481d      	ldr	r0, [pc, #116]	; (800060c <Max7219_Config+0x18c>)
 8000596:	f001 fcb3 	bl	8001f00 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	3301      	adds	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d9ec      	bls.n	8000580 <Max7219_Config+0x100>
				}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <Max7219_Config+0x190>)
 80005ae:	f000 ffd5 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <Max7219_Config+0x190>)
 80005ba:	f000 ffcf 	bl	800155c <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
 80005c2:	e010      	b.n	80005e6 <Max7219_Config+0x166>
		HAL_SPI_Transmit_DMA( &hspi2, &display_test,1);
 80005c4:	f107 030a 	add.w	r3, r7, #10
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	480f      	ldr	r0, [pc, #60]	; (800060c <Max7219_Config+0x18c>)
 80005ce:	f001 fc97 	bl	8001f00 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Transmit_DMA( &hspi2,&mode_0, 1);
 80005d2:	f107 0309 	add.w	r3, r7, #9
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <Max7219_Config+0x18c>)
 80005dc:	f001 fc90 	bl	8001f00 <HAL_SPI_Transmit_DMA>
	for (i = 0; i < NUM_HOR_MODULE; i++){
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	3301      	adds	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d9eb      	bls.n	80005c4 <Max7219_Config+0x144>
					}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <Max7219_Config+0x190>)
 80005f4:	f000 ffb2 	bl	800155c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <Max7219_Config+0x190>)
 8000600:	f000 ffac 	bl	800155c <HAL_GPIO_WritePin>

}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000070 	.word	0x20000070
 8000610:	40010c00 	.word	0x40010c00

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fae7 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f82f 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8f9 	bl	8000818 <MX_GPIO_Init>
  MX_DMA_Init();
 8000626:	f000 f8d1 	bl	80007cc <MX_DMA_Init>
  MX_SPI2_Init();
 800062a:	f000 f86f 	bl	800070c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8a3 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t timer = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
  Max7219_Config();
 8000636:	f7ff ff23 	bl	8000480 <Max7219_Config>
  HAL_UART_Receive_DMA(&huart2, &uart_rx, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <main+0x5c>)
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <main+0x60>)
 8000640:	f001 fea3 	bl	800238a <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GetTick()-timer >= SPEED){
 8000644:	f000 fb2a 	bl	8000c9c <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	2b63      	cmp	r3, #99	; 0x63
 8000650:	d9f8      	bls.n	8000644 <main+0x30>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0x64>)
 8000658:	f000 ff98 	bl	800158c <HAL_GPIO_TogglePin>
		  Rotate (output_arr);
 800065c:	4807      	ldr	r0, [pc, #28]	; (800067c <main+0x68>)
 800065e:	f7ff fe59 	bl	8000314 <Rotate>
		  data_to_module(output_arr);
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <main+0x68>)
 8000664:	f7ff fe12 	bl	800028c <data_to_module>
		  timer=HAL_GetTick();
 8000668:	f000 fb18 	bl	8000c9c <HAL_GetTick>
 800066c:	6078      	str	r0, [r7, #4]
	  if (HAL_GetTick()-timer >= SPEED){
 800066e:	e7e9      	b.n	8000644 <main+0x30>
 8000670:	20000029 	.word	0x20000029
 8000674:	200000fc 	.word	0x200000fc
 8000678:	40011000 	.word	0x40011000
 800067c:	20000184 	.word	0x20000184

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 f8d0 	bl	8002834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 ff79 	bl	80015c0 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006d4:	f000 f90e 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f9e4 	bl	8001ac0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006fe:	f000 f8f9 	bl	80008f4 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3740      	adds	r7, #64	; 0x40
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_SPI2_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_SPI2_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI2_Init+0x64>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI2_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_SPI2_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI2_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI2_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI2_Init+0x64>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI2_Init+0x64>)
 8000740:	2208      	movs	r2, #8
 8000742:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_SPI2_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI2_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_SPI2_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI2_Init+0x64>)
 8000758:	220a      	movs	r2, #10
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_SPI2_Init+0x64>)
 800075e:	f001 fb4b 	bl	8001df8 <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f8c4 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000070 	.word	0x20000070
 8000774:	40003800 	.word	0x40003800

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 fd9e 	bl	80022f0 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f89b 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000fc 	.word	0x200000fc
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_DMA_Init+0x48>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <MX_DMA_Init+0x48>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_DMA_Init+0x48>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 fb35 	bl	8000e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007f4:	200f      	movs	r0, #15
 80007f6:	f000 fb4e 	bl	8000e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2010      	movs	r0, #16
 8000800:	f000 fb2d 	bl	8000e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000804:	2010      	movs	r0, #16
 8000806:	f000 fb46 	bl	8000e96 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082c:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a2d      	ldr	r2, [pc, #180]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0310 	and.w	r3, r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800084a:	f043 0320 	orr.w	r3, r3, #32
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0320 	and.w	r3, r3, #32
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	4816      	ldr	r0, [pc, #88]	; (80008ec <MX_GPIO_Init+0xd4>)
 8000894:	f000 fe62 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0xd8>)
 80008a0:	f000 fe5c 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <MX_GPIO_Init+0xd4>)
 80008be:	f000 fcf3 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_GPIO_Init+0xd8>)
 80008dc:	f000 fce4 	bl	80012a8 <HAL_GPIO_Init>

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40011000 	.word	0x40011000
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fa:	e7fe      	b.n	80008fa <Error_Handler+0x6>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_MspInit+0x5c>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <HAL_MspInit+0x5c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x5c>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x5c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_MspInit+0x60>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_MspInit+0x60>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	40010000 	.word	0x40010000

08000960 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <HAL_SPI_MspInit+0xc0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d14a      	bne.n	8000a16 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <HAL_SPI_MspInit+0xc4>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <HAL_SPI_MspInit+0xc4>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	61d3      	str	r3, [r2, #28]
 800098c:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <HAL_SPI_MspInit+0xc4>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <HAL_SPI_MspInit+0xc4>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <HAL_SPI_MspInit+0xc4>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HAL_SPI_MspInit+0xc4>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <HAL_SPI_MspInit+0xc8>)
 80009c6:	f000 fc6f 	bl	80012a8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009cc:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <HAL_SPI_MspInit+0xd0>)
 80009ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009d2:	2210      	movs	r2, #16
 80009d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 80009fc:	f000 fa66 	bl	8000ecc <HAL_DMA_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000a06:	f7ff ff75 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 8000a0e:	649a      	str	r2, [r3, #72]	; 0x48
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_SPI_MspInit+0xcc>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40003800 	.word	0x40003800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010c00 	.word	0x40010c00
 8000a2c:	20000140 	.word	0x20000140
 8000a30:	40020058 	.word	0x40020058

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <HAL_UART_MspInit+0xd4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d155      	bne.n	8000b00 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_UART_MspInit+0xd8>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <HAL_UART_MspInit+0xd8>)
 8000a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_UART_MspInit+0xd8>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_UART_MspInit+0xd8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_UART_MspInit+0xd8>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <HAL_UART_MspInit+0xd8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a84:	2304      	movs	r3, #4
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	481e      	ldr	r0, [pc, #120]	; (8000b10 <HAL_UART_MspInit+0xdc>)
 8000a98:	f000 fc06 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0xdc>)
 8000ab0:	f000 fbfa 	bl	80012a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0xe4>)
 8000ab8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000ae6:	f000 f9f1 	bl	8000ecc <HAL_DMA_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000af0:	f7ff ff00 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000af8:	639a      	str	r2, [r3, #56]	; 0x38
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_UART_MspInit+0xe0>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	4002006c 	.word	0x4002006c

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 f889 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <DMA1_Channel5_IRQHandler+0x10>)
 8000b72:	f000 fa65 	bl	8001040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000140 	.word	0x20000140

08000b80 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <DMA1_Channel6_IRQHandler+0x10>)
 8000b86:	f000 fa5b 	bl	8001040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000002c 	.word	0x2000002c

08000b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc6:	f7ff ffe5 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f001 fe0f 	bl	80027ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fd21 	bl	8000614 <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bdc:	08002c90 	.word	0x08002c90
  ldr r2, =_sbss
 8000be0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be4:	20000318 	.word	0x20000318

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_Init+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_Init+0x28>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f923 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fe78 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f93b 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 f903 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a03      	ldr	r2, [pc, #12]	; (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000314 	.word	0x20000314

08000c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20000314 	.word	0x20000314

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4906      	ldr	r1, [pc, #24]	; (8000d48 <__NVIC_EnableIRQ+0x34>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff90 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff2d 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff42 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff90 	bl	8000da0 <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5f 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff35 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffa2 	bl	8000e04 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e043      	b.n	8000f6a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_DMA_Init+0xa8>)
 8000eea:	4413      	add	r3, r2
 8000eec:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_DMA_Init+0xac>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	009a      	lsls	r2, r3, #2
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_DMA_Init+0xb0>)
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	bffdfff8 	.word	0xbffdfff8
 8000f78:	cccccccd 	.word	0xcccccccd
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_DMA_Start_IT+0x20>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e04a      	b.n	8001036 <HAL_DMA_Start_IT+0xb6>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d13a      	bne.n	8001028 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0201 	bic.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 f938 	bl	800124c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 020e 	orr.w	r2, r2, #14
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	e00f      	b.n	8001016 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0204 	bic.w	r2, r2, #4
 8001004:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 020a 	orr.w	r2, r2, #10
 8001014:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0201 	orr.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e005      	b.n	8001034 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001030:	2302      	movs	r3, #2
 8001032:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001034:	7dfb      	ldrb	r3, [r7, #23]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	2204      	movs	r2, #4
 800105e:	409a      	lsls	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d04f      	beq.n	8001108 <HAL_DMA_IRQHandler+0xc8>
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d04a      	beq.n	8001108 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0204 	bic.w	r2, r2, #4
 800108e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a66      	ldr	r2, [pc, #408]	; (8001230 <HAL_DMA_IRQHandler+0x1f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d029      	beq.n	80010ee <HAL_DMA_IRQHandler+0xae>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a65      	ldr	r2, [pc, #404]	; (8001234 <HAL_DMA_IRQHandler+0x1f4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d022      	beq.n	80010ea <HAL_DMA_IRQHandler+0xaa>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a63      	ldr	r2, [pc, #396]	; (8001238 <HAL_DMA_IRQHandler+0x1f8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01a      	beq.n	80010e4 <HAL_DMA_IRQHandler+0xa4>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a62      	ldr	r2, [pc, #392]	; (800123c <HAL_DMA_IRQHandler+0x1fc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d012      	beq.n	80010de <HAL_DMA_IRQHandler+0x9e>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a60      	ldr	r2, [pc, #384]	; (8001240 <HAL_DMA_IRQHandler+0x200>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x98>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a5f      	ldr	r2, [pc, #380]	; (8001244 <HAL_DMA_IRQHandler+0x204>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d102      	bne.n	80010d2 <HAL_DMA_IRQHandler+0x92>
 80010cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d0:	e00e      	b.n	80010f0 <HAL_DMA_IRQHandler+0xb0>
 80010d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010d6:	e00b      	b.n	80010f0 <HAL_DMA_IRQHandler+0xb0>
 80010d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010dc:	e008      	b.n	80010f0 <HAL_DMA_IRQHandler+0xb0>
 80010de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e2:	e005      	b.n	80010f0 <HAL_DMA_IRQHandler+0xb0>
 80010e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e8:	e002      	b.n	80010f0 <HAL_DMA_IRQHandler+0xb0>
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	e000      	b.n	80010f0 <HAL_DMA_IRQHandler+0xb0>
 80010ee:	2304      	movs	r3, #4
 80010f0:	4a55      	ldr	r2, [pc, #340]	; (8001248 <HAL_DMA_IRQHandler+0x208>)
 80010f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8094 	beq.w	8001226 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001106:	e08e      	b.n	8001226 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	2202      	movs	r2, #2
 800110e:	409a      	lsls	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d056      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x186>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d051      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0320 	and.w	r3, r3, #32
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10b      	bne.n	8001148 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 020a 	bic.w	r2, r2, #10
 800113e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a38      	ldr	r2, [pc, #224]	; (8001230 <HAL_DMA_IRQHandler+0x1f0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d029      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x166>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a37      	ldr	r2, [pc, #220]	; (8001234 <HAL_DMA_IRQHandler+0x1f4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d022      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x162>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a35      	ldr	r2, [pc, #212]	; (8001238 <HAL_DMA_IRQHandler+0x1f8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01a      	beq.n	800119c <HAL_DMA_IRQHandler+0x15c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a34      	ldr	r2, [pc, #208]	; (800123c <HAL_DMA_IRQHandler+0x1fc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d012      	beq.n	8001196 <HAL_DMA_IRQHandler+0x156>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a32      	ldr	r2, [pc, #200]	; (8001240 <HAL_DMA_IRQHandler+0x200>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00a      	beq.n	8001190 <HAL_DMA_IRQHandler+0x150>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <HAL_DMA_IRQHandler+0x204>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d102      	bne.n	800118a <HAL_DMA_IRQHandler+0x14a>
 8001184:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001188:	e00e      	b.n	80011a8 <HAL_DMA_IRQHandler+0x168>
 800118a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118e:	e00b      	b.n	80011a8 <HAL_DMA_IRQHandler+0x168>
 8001190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001194:	e008      	b.n	80011a8 <HAL_DMA_IRQHandler+0x168>
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	e005      	b.n	80011a8 <HAL_DMA_IRQHandler+0x168>
 800119c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a0:	e002      	b.n	80011a8 <HAL_DMA_IRQHandler+0x168>
 80011a2:	2320      	movs	r3, #32
 80011a4:	e000      	b.n	80011a8 <HAL_DMA_IRQHandler+0x168>
 80011a6:	2302      	movs	r3, #2
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <HAL_DMA_IRQHandler+0x208>)
 80011aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d034      	beq.n	8001226 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011c4:	e02f      	b.n	8001226 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	2208      	movs	r2, #8
 80011cc:	409a      	lsls	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d028      	beq.n	8001228 <HAL_DMA_IRQHandler+0x1e8>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d023      	beq.n	8001228 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 020e 	bic.w	r2, r2, #14
 80011ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4798      	blx	r3
    }
  }
  return;
 8001226:	bf00      	nop
 8001228:	bf00      	nop
}
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020008 	.word	0x40020008
 8001234:	4002001c 	.word	0x4002001c
 8001238:	40020030 	.word	0x40020030
 800123c:	40020044 	.word	0x40020044
 8001240:	40020058 	.word	0x40020058
 8001244:	4002006c 	.word	0x4002006c
 8001248:	40020000 	.word	0x40020000

0800124c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b10      	cmp	r3, #16
 8001278:	d108      	bne.n	800128c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800128a:	e007      	b.n	800129c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	60da      	str	r2, [r3, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b08b      	sub	sp, #44	; 0x2c
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	e127      	b.n	800150c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012bc:	2201      	movs	r2, #1
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 8116 	bne.w	8001506 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d034      	beq.n	800134c <HAL_GPIO_Init+0xa4>
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d80d      	bhi.n	8001302 <HAL_GPIO_Init+0x5a>
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x9a>
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d804      	bhi.n	80012f8 <HAL_GPIO_Init+0x50>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d031      	beq.n	8001356 <HAL_GPIO_Init+0xae>
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d01c      	beq.n	8001330 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f6:	e048      	b.n	800138a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d043      	beq.n	8001384 <HAL_GPIO_Init+0xdc>
 80012fc:	2b11      	cmp	r3, #17
 80012fe:	d01b      	beq.n	8001338 <HAL_GPIO_Init+0x90>
          break;
 8001300:	e043      	b.n	800138a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001302:	4a89      	ldr	r2, [pc, #548]	; (8001528 <HAL_GPIO_Init+0x280>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d026      	beq.n	8001356 <HAL_GPIO_Init+0xae>
 8001308:	4a87      	ldr	r2, [pc, #540]	; (8001528 <HAL_GPIO_Init+0x280>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d806      	bhi.n	800131c <HAL_GPIO_Init+0x74>
 800130e:	4a87      	ldr	r2, [pc, #540]	; (800152c <HAL_GPIO_Init+0x284>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d020      	beq.n	8001356 <HAL_GPIO_Init+0xae>
 8001314:	4a86      	ldr	r2, [pc, #536]	; (8001530 <HAL_GPIO_Init+0x288>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01d      	beq.n	8001356 <HAL_GPIO_Init+0xae>
          break;
 800131a:	e036      	b.n	800138a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800131c:	4a85      	ldr	r2, [pc, #532]	; (8001534 <HAL_GPIO_Init+0x28c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0xae>
 8001322:	4a85      	ldr	r2, [pc, #532]	; (8001538 <HAL_GPIO_Init+0x290>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d016      	beq.n	8001356 <HAL_GPIO_Init+0xae>
 8001328:	4a84      	ldr	r2, [pc, #528]	; (800153c <HAL_GPIO_Init+0x294>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0xae>
          break;
 800132e:	e02c      	b.n	800138a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e028      	b.n	800138a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	3304      	adds	r3, #4
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e023      	b.n	800138a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	3308      	adds	r3, #8
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e01e      	b.n	800138a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	330c      	adds	r3, #12
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e019      	b.n	800138a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800135e:	2304      	movs	r3, #4
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e012      	b.n	800138a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	611a      	str	r2, [r3, #16]
          break;
 8001376:	e008      	b.n	800138a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001378:	2308      	movs	r3, #8
 800137a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	615a      	str	r2, [r3, #20]
          break;
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2bff      	cmp	r3, #255	; 0xff
 800138e:	d801      	bhi.n	8001394 <HAL_GPIO_Init+0xec>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	e001      	b.n	8001398 <HAL_GPIO_Init+0xf0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3304      	adds	r3, #4
 8001398:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2bff      	cmp	r3, #255	; 0xff
 800139e:	d802      	bhi.n	80013a6 <HAL_GPIO_Init+0xfe>
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x104>
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	3b08      	subs	r3, #8
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	210f      	movs	r1, #15
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	401a      	ands	r2, r3
 80013be:	6a39      	ldr	r1, [r7, #32]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	431a      	orrs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8096 	beq.w	8001506 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013da:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_GPIO_Init+0x298>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_GPIO_Init+0x298>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b56      	ldr	r3, [pc, #344]	; (8001540 <HAL_GPIO_Init+0x298>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f2:	4a54      	ldr	r2, [pc, #336]	; (8001544 <HAL_GPIO_Init+0x29c>)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4013      	ands	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <HAL_GPIO_Init+0x2a0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x19e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_GPIO_Init+0x2a4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x19a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a49      	ldr	r2, [pc, #292]	; (8001550 <HAL_GPIO_Init+0x2a8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x196>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_GPIO_Init+0x2ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x192>
 8001436:	2303      	movs	r3, #3
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x1a0>
 800143a:	2304      	movs	r3, #4
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x1a0>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x1a0>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x1a0>
 8001446:	2300      	movs	r3, #0
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001458:	493a      	ldr	r1, [pc, #232]	; (8001544 <HAL_GPIO_Init+0x29c>)
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4938      	ldr	r1, [pc, #224]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
 800147e:	e006      	b.n	800148e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	43db      	mvns	r3, r3
 8001488:	4933      	ldr	r1, [pc, #204]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 800148a:	4013      	ands	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	492e      	ldr	r1, [pc, #184]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4929      	ldr	r1, [pc, #164]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	4924      	ldr	r1, [pc, #144]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
 80014ce:	e006      	b.n	80014de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	491f      	ldr	r1, [pc, #124]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014da:	4013      	ands	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	491a      	ldr	r1, [pc, #104]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60cb      	str	r3, [r1, #12]
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	43db      	mvns	r3, r3
 8001500:	4915      	ldr	r1, [pc, #84]	; (8001558 <HAL_GPIO_Init+0x2b0>)
 8001502:	4013      	ands	r3, r2
 8001504:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	f47f aed0 	bne.w	80012bc <HAL_GPIO_Init+0x14>
  }
}
 800151c:	bf00      	nop
 800151e:	372c      	adds	r7, #44	; 0x2c
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	10210000 	.word	0x10210000
 800152c:	10110000 	.word	0x10110000
 8001530:	10120000 	.word	0x10120000
 8001534:	10310000 	.word	0x10310000
 8001538:	10320000 	.word	0x10320000
 800153c:	10220000 	.word	0x10220000
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40011000 	.word	0x40011000
 8001554:	40011400 	.word	0x40011400
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43d9      	mvns	r1, r3
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	400b      	ands	r3, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	611a      	str	r2, [r3, #16]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e26c      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8087 	beq.w	80016ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e0:	4b92      	ldr	r3, [pc, #584]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d00c      	beq.n	8001606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ec:	4b8f      	ldr	r3, [pc, #572]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d112      	bne.n	800161e <HAL_RCC_OscConfig+0x5e>
 80015f8:	4b8c      	ldr	r3, [pc, #560]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	d10b      	bne.n	800161e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4b89      	ldr	r3, [pc, #548]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d06c      	beq.n	80016ec <HAL_RCC_OscConfig+0x12c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d168      	bne.n	80016ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e246      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x76>
 8001628:	4b80      	ldr	r3, [pc, #512]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a7f      	ldr	r2, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e02e      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b7b      	ldr	r3, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7a      	ldr	r2, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a77      	ldr	r2, [pc, #476]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e01d      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0xbc>
 8001662:	4b72      	ldr	r3, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a71      	ldr	r2, [pc, #452]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 800167c:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a6a      	ldr	r2, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a67      	ldr	r2, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fafe 	bl	8000c9c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fafa 	bl	8000c9c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1fa      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b5d      	ldr	r3, [pc, #372]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe4>
 80016c2:	e014      	b.n	80016ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff faea 	bl	8000c9c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fae6 	bl	8000c9c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1e6      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x10c>
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d063      	beq.n	80017c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fa:	4b4c      	ldr	r3, [pc, #304]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001706:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d11c      	bne.n	800174c <HAL_RCC_OscConfig+0x18c>
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x176>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e1ba      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4939      	ldr	r1, [pc, #228]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	e03a      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fa9f 	bl	8000c9c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fa9b 	bl	8000c9c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e19b      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4927      	ldr	r1, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fa7e 	bl	8000c9c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fa7a 	bl	8000c9c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e17a      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03a      	beq.n	8001844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d019      	beq.n	800180a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa5e 	bl	8000c9c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fa5a 	bl	8000c9c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e15a      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 fada 	bl	8001dbc <RCC_Delay>
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff fa44 	bl	8000c9c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001816:	e00f      	b.n	8001838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fa40 	bl	8000c9c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d908      	bls.n	8001838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e140      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	42420000 	.word	0x42420000
 8001834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b9e      	ldr	r3, [pc, #632]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1e9      	bne.n	8001818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a6 	beq.w	800199e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b97      	ldr	r3, [pc, #604]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10d      	bne.n	800187e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b94      	ldr	r3, [pc, #592]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a93      	ldr	r2, [pc, #588]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b91      	ldr	r3, [pc, #580]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187a:	2301      	movs	r3, #1
 800187c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a8a      	ldr	r2, [pc, #552]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001896:	f7ff fa01 	bl	8000c9c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189e:	f7ff f9fd 	bl	8000c9c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	; 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0fd      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <HAL_RCC_OscConfig+0x4f8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x312>
 80018c4:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a7a      	ldr	r2, [pc, #488]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e02d      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x334>
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a75      	ldr	r2, [pc, #468]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a72      	ldr	r2, [pc, #456]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	e01c      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x356>
 80018fc:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a6c      	ldr	r2, [pc, #432]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a69      	ldr	r2, [pc, #420]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	e00b      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a66      	ldr	r2, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d015      	beq.n	8001962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff f9b1 	bl	8000c9c <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff f9ad 	bl	8000c9c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0ab      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ee      	beq.n	800193e <HAL_RCC_OscConfig+0x37e>
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7ff f99b 	bl	8000c9c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7ff f997 	bl	8000c9c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e095      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a47      	ldr	r2, [pc, #284]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8081 	beq.w	8001aaa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a8:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d061      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d146      	bne.n	8001a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x4fc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff f96b 	bl	8000c9c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff f967 	bl	8000c9c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e067      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f2:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	492d      	ldr	r1, [pc, #180]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a19      	ldr	r1, [r3, #32]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	430b      	orrs	r3, r1
 8001a16:	4927      	ldr	r1, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x4fc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff f93b 	bl	8000c9c <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff f937 	bl	8000c9c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e037      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x46a>
 8001a48:	e02f      	b.n	8001aaa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_RCC_OscConfig+0x4fc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff f924 	bl	8000c9c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f920 	bl	8000c9c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e020      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x498>
 8001a76:	e018      	b.n	8001aaa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e013      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42420060 	.word	0x42420060

08001ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d0      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4965      	ldr	r1, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d040      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e073      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4936      	ldr	r1, [pc, #216]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb0:	f7ff f874 	bl	8000c9c <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff f870 	bl	8000c9c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e053      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d210      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4922      	ldr	r1, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4601      	mov	r1, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	fa21 f303 	lsr.w	r3, r1, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1cc>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1d0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe ffd2 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08002c70 	.word	0x08002c70
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b490      	push	{r4, r7}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c9c:	1d3c      	adds	r4, r7, #4
 8001c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x46>
 8001cd2:	e02d      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cd6:	623b      	str	r3, [r7, #32]
      break;
 8001cd8:	e02d      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	0c9b      	lsrs	r3, r3, #18
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	0c5b      	lsrs	r3, r3, #17
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d06:	4413      	add	r3, r2
 8001d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d12:	fb02 f203 	mul.w	r2, r2, r3
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e004      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	623b      	str	r3, [r7, #32]
      break;
 8001d2e:	e002      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d32:	623b      	str	r3, [r7, #32]
      break;
 8001d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d36:	6a3b      	ldr	r3, [r7, #32]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3728      	adds	r7, #40	; 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc90      	pop	{r4, r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	0800285c 	.word	0x0800285c
 8001d48:	0800286c 	.word	0x0800286c
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	003d0900 	.word	0x003d0900

08001d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d70:	f7ff fff2 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d74:	4601      	mov	r1, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08002c80 	.word	0x08002c80

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4601      	mov	r1, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	0adb      	lsrs	r3, r3, #11
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08002c80 	.word	0x08002c80

08001dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <RCC_Delay+0x34>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <RCC_Delay+0x38>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0a5b      	lsrs	r3, r3, #9
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dd8:	bf00      	nop
  }
  while (Delay --);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	60fa      	str	r2, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <RCC_Delay+0x1c>
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000
 8001df4:	10624dd3 	.word	0x10624dd3

08001df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e076      	b.n	8001ef8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d108      	bne.n	8001e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e1a:	d009      	beq.n	8001e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
 8001e22:	e005      	b.n	8001e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd88 	bl	8000960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	0c1a      	lsrs	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f002 0204 	and.w	r2, r2, #4
 8001ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_SPI_Transmit_DMA+0x20>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e09b      	b.n	8002058 <HAL_SPI_Transmit_DMA+0x158>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d002      	beq.n	8001f3a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
 8001f36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f38:	e089      	b.n	800204e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_SPI_Transmit_DMA+0x46>
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f4a:	e080      	b.n	800204e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	88fa      	ldrh	r2, [r7, #6]
 8001f64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f92:	d10f      	bne.n	8001fb4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb8:	4a29      	ldr	r2, [pc, #164]	; (8002060 <HAL_SPI_Transmit_DMA+0x160>)
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <HAL_SPI_Transmit_DMA+0x164>)
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_SPI_Transmit_DMA+0x168>)
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4619      	mov	r1, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001fec:	f7fe ffc8 	bl	8000f80 <HAL_DMA_Start_IT>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800200e:	e01e      	b.n	800204e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d007      	beq.n	800202e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0220 	orr.w	r2, r2, #32
 800203c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0202 	orr.w	r2, r2, #2
 800204c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	08002149 	.word	0x08002149
 8002064:	080020a3 	.word	0x080020a3
 8002068:	08002165 	.word	0x08002165

0800206c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020b0:	f7fe fdf4 	bl	8000c9c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d03b      	beq.n	800213c <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0220 	bic.w	r2, r2, #32
 80020d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0202 	bic.w	r2, r2, #2
 80020e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	2164      	movs	r1, #100	; 0x64
 80020e8:	6978      	ldr	r0, [r7, #20]
 80020ea:	f000 f8e3 	bl	80022b4 <SPI_EndRxTxTransaction>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002134:	6978      	ldr	r0, [r7, #20]
 8002136:	f7ff ffab 	bl	8002090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800213a:	e002      	b.n	8002142 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800213c:	6978      	ldr	r0, [r7, #20]
 800213e:	f7ff ff95 	bl	800206c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff ff91 	bl	800207e <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0203 	bic.w	r2, r2, #3
 8002180:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff ff7a 	bl	8002090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021b4:	f7fe fd72 	bl	8000c9c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021c4:	f7fe fd6a 	bl	8000c9c <HAL_GetTick>
 80021c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	015b      	lsls	r3, r3, #5
 80021d0:	0d1b      	lsrs	r3, r3, #20
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021da:	e054      	b.n	8002286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d050      	beq.n	8002286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021e4:	f7fe fd5a 	bl	8000c9c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d902      	bls.n	80021fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d13d      	bne.n	8002276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002212:	d111      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221c:	d004      	beq.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d107      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002240:	d10f      	bne.n	8002262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e017      	b.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3b01      	subs	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4013      	ands	r3, r2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d19b      	bne.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000

080022b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff ff6a 	bl	80021a4 <SPI_WaitFlagStateUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	f043 0220 	orr.w	r2, r3, #32
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e000      	b.n	80022e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e03f      	b.n	8002382 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fb8c 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2224      	movs	r2, #36	; 0x24
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f9cb 	bl	80026d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	4613      	mov	r3, r2
 8002396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d11d      	bne.n	80023e0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_UART_Receive_DMA+0x26>
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e016      	b.n	80023e2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Receive_DMA+0x38>
 80023be:	2302      	movs	r3, #2
 80023c0:	e00f      	b.n	80023e2 <HAL_UART_Receive_DMA+0x58>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f8d4 	bl	8002584 <UART_Start_Receive_DMA>
 80023dc:	4603      	mov	r3, r0
 80023de:	e000      	b.n	80023e2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
  }
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d12a      	bne.n	8002496 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002454:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002474:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0210 	bic.w	r2, r2, #16
 8002494:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	2b01      	cmp	r3, #1
 800249c:	d106      	bne.n	80024ac <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff ffb2 	bl	800240e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024aa:	e002      	b.n	80024b2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7fd fe99 	bl	80001e4 <HAL_UART_RxCpltCallback>
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7ff ff97 	bl	800240e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024e0:	e002      	b.n	80024e8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff ff81 	bl	80023ea <HAL_UART_RxHalfCpltCallback>
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b21      	cmp	r3, #33	; 0x21
 8002522:	d108      	bne.n	8002536 <UART_DMAError+0x46>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2200      	movs	r2, #0
 800252e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002530:	68b8      	ldr	r0, [r7, #8]
 8002532:	f000 f88b 	bl	800264c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b22      	cmp	r3, #34	; 0x22
 8002556:	d108      	bne.n	800256a <UART_DMAError+0x7a>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002564:	68b8      	ldr	r0, [r7, #8]
 8002566:	f000 f886 	bl	8002676 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0210 	orr.w	r2, r3, #16
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002576:	68b8      	ldr	r0, [r7, #8]
 8002578:	f7ff ff40 	bl	80023fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2222      	movs	r2, #34	; 0x22
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <UART_Start_Receive_DMA+0xbc>)
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <UART_Start_Receive_DMA+0xc0>)
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <UART_Start_Receive_DMA+0xc4>)
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2200      	movs	r2, #0
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3304      	adds	r3, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	f7fe fccc 	bl	8000f80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002614:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002634:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	08002425 	.word	0x08002425
 8002644:	080024bb 	.word	0x080024bb
 8002648:	080024f1 	.word	0x080024f1

0800264c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002662:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800268c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0210 	bic.w	r2, r2, #16
 80026b4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
	...

080026d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800270a:	f023 030c 	bic.w	r3, r3, #12
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	430b      	orrs	r3, r1
 8002716:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2c      	ldr	r2, [pc, #176]	; (80027e4 <UART_SetConfig+0x114>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d103      	bne.n	8002740 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002738:	f7ff fb2c 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	e002      	b.n	8002746 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002740:	f7ff fb14 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8002744:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <UART_SetConfig+0x118>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	0119      	lsls	r1, r3, #4
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009a      	lsls	r2, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fbb2 f2f3 	udiv	r2, r2, r3
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <UART_SetConfig+0x118>)
 800277e:	fba3 0302 	umull	r0, r3, r3, r2
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	fb00 f303 	mul.w	r3, r0, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	3332      	adds	r3, #50	; 0x32
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <UART_SetConfig+0x118>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279c:	4419      	add	r1, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009a      	lsls	r2, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <UART_SetConfig+0x118>)
 80027b6:	fba3 0302 	umull	r0, r3, r3, r2
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2064      	movs	r0, #100	; 0x64
 80027be:	fb00 f303 	mul.w	r3, r0, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	3332      	adds	r3, #50	; 0x32
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <UART_SetConfig+0x118>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 020f 	and.w	r2, r3, #15
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	440a      	add	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40013800 	.word	0x40013800
 80027e8:	51eb851f 	.word	0x51eb851f

080027ec <__libc_init_array>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	2500      	movs	r5, #0
 80027f0:	4e0c      	ldr	r6, [pc, #48]	; (8002824 <__libc_init_array+0x38>)
 80027f2:	4c0d      	ldr	r4, [pc, #52]	; (8002828 <__libc_init_array+0x3c>)
 80027f4:	1ba4      	subs	r4, r4, r6
 80027f6:	10a4      	asrs	r4, r4, #2
 80027f8:	42a5      	cmp	r5, r4
 80027fa:	d109      	bne.n	8002810 <__libc_init_array+0x24>
 80027fc:	f000 f822 	bl	8002844 <_init>
 8002800:	2500      	movs	r5, #0
 8002802:	4e0a      	ldr	r6, [pc, #40]	; (800282c <__libc_init_array+0x40>)
 8002804:	4c0a      	ldr	r4, [pc, #40]	; (8002830 <__libc_init_array+0x44>)
 8002806:	1ba4      	subs	r4, r4, r6
 8002808:	10a4      	asrs	r4, r4, #2
 800280a:	42a5      	cmp	r5, r4
 800280c:	d105      	bne.n	800281a <__libc_init_array+0x2e>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002814:	4798      	blx	r3
 8002816:	3501      	adds	r5, #1
 8002818:	e7ee      	b.n	80027f8 <__libc_init_array+0xc>
 800281a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800281e:	4798      	blx	r3
 8002820:	3501      	adds	r5, #1
 8002822:	e7f2      	b.n	800280a <__libc_init_array+0x1e>
 8002824:	08002c88 	.word	0x08002c88
 8002828:	08002c88 	.word	0x08002c88
 800282c:	08002c88 	.word	0x08002c88
 8002830:	08002c8c 	.word	0x08002c8c

08002834 <memset>:
 8002834:	4603      	mov	r3, r0
 8002836:	4402      	add	r2, r0
 8002838:	4293      	cmp	r3, r2
 800283a:	d100      	bne.n	800283e <memset+0xa>
 800283c:	4770      	bx	lr
 800283e:	f803 1b01 	strb.w	r1, [r3], #1
 8002842:	e7f9      	b.n	8002838 <memset+0x4>

08002844 <_init>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr

08002850 <_fini>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	bf00      	nop
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr
